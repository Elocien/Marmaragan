package body Copy_P with
   Spark_Mode
 is

   procedure Copy
     (A :        T_Arr;
      B : in out T_Arr)
   is
   begin
      for J in A'Range loop
         declare
            K : Positive := B'First + (J - A'First);
         begin
            B (K) := A (J);

            pragma Loop_Invariant (A (A'First .. J) = B (B'First .. K));

         end;
      end loop;
   end Copy;
end Copy_P;


with Types;          use Types;

package Copy_P with
   Spark_Mode
 is

   procedure Copy
     (A :        T_Arr;
      B : in out T_Arr) with
      Pre  => A'Length = B'Length,
      Post => B = A;

end Copy_P;


package Types is

   type T is new Integer;

   type T_Arr is array (Positive range <>) of T;

   type T_Option (OK : Boolean) is record
      case OK is
         when True =>
            Value : T;
         when False =>
            null;
      end case;
   end record;

   MAX_SIZE : constant := 1000;

   type Option (Exists : Boolean := False) is record
      case Exists is
         when True =>
            Value : Integer;
         when False =>
            null;
      end case;
   end record;

   type Option_Pair (Exists : Boolean := False) is record
      case Exists is
         when True =>
            Lower : Integer;
            Upper : Integer;
         when False =>
            null;
      end case;
   end record;

   type Heap is record
      A    : T_Arr (1 .. MAX_SIZE) := (others => 0);
      Size : Natural               := 0;
   end record;

end Types;