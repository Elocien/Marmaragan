# Created 2018-10-26 Fri 13:51
#+OPTIONS: author:nil title:nil toc:nil
#+EXPORT_FILE_NAME: ../../../sorting/Partial_Sort.org

* The Partial_Sort algorithm

The ~Partial_Sort~ algorithm takes an array ~A~ and a valid index
~M~ as parameters and

- ensures that all values after index ~M~ are greater than all
  values before index ~M~
- sorts ~A~ up to index ~M~

Its signature is:

#+BEGIN_SRC ada
  procedure Partial_Sort (A : in out T_Arr; M : Positive)
#+END_SRC

This algorithm uses previously proved algorithms and techniques to
help the provers, so it is better to read the [[file:../heap/README.org][chapter on binary
heaps]] before.

** The Partition predicate

We define first a ~Partition~ predicate to specify that the
values in an array ~A~ are partitioned given an index ~M~
(partitioning meaning that all values before ~M~ are less than all
values after ~M~):

#+BEGIN_SRC ada
  function Partition
    (A       : T_Arr;
     M, Size : Positive)
     return Boolean is
    (for all J in A'First .. M - 1 =>
       (for all K in M .. Size => A (J) <= A (K))) with
     Pre => M in A'First .. Size and then Size in A'Range;
#+END_SRC

** Specification of Partial_Sort

Given the previous predicate, the specification of ~Partial_Sort~
is rather simple:

#+BEGIN_SRC ada
  procedure Partial_Sort
    (A : in out T_Arr;
     M :        Positive) with
     Pre  => M in A'First .. A'Last and then A'Length < MAX_SIZE,
     Post => Multiset_Unchanged (A'Old, A)
     and then Sorted (A (A'First .. M - 1)) and then Partition (A, M, A'Last);
#+END_SRC

The precondition on the length of ~A~ is necessary as a heap will
be used in the implementation.

** The Partial_Sort_Heap procedure

As a heap will be used in the implementation of ~Partial_Sort~, we
first define an auxiliary function that does the same job on a
heap. ~Partial_Sort_Heap~ takes a ~Heap~ ~H~ as parameter such
that the ~M - 1~ first elements of the encapsulated array ~H.A~
are considered to be a heap. ~Partial_Sort_Heap~ then sorts ~H.A~
up to ~M - 1~ and guarantees that ~H.A~ is correctly partitioned
with ~M~ as pivot.

*** Specification of Partial_Sort_Heap

The specification of our auxiliary function is:

#+BEGIN_SRC ada
  procedure Partial_Sort_Heap
    (H : in out Heap;
     M :        Positive) with
     Pre => H.Size > 0 and then M in 2 .. H.Size and then H.Size <= MAX_SIZE
     and then (if M > 1 then Is_Heap_Def ((A => H.A, Size => M - 1))),
     Post => Sorted (H.A (1 .. M - 1)) and then Partition (H.A, M, H.Size)
     and then Multiset_Unchanged (H.A'Old, H.A) and then H.Size = H'Old.Size
     and then
     (if H.Size < MAX_SIZE then
        H'Old.A (H.Size + 1 .. MAX_SIZE) = H.A (H.Size + 1 .. MAX_SIZE));
#+END_SRC

Notice that at the end of the function, the ~Size~ attribute and
the elements of the encapsulated array after index ~H.Size + 1~
have not changed.

*** Implementation of Partial_Sort_Heap

The implementation of ~Partial_Sort_Heap~ is the following:

#+BEGIN_SRC ada
  procedure Partial_Sort_Heap
    (H : in out Heap;
     M :        Positive)
  is
     Old_Size : constant Natural := H.Size;
     Size     : constant Natural := M - 1;
     A_Save   : T_Arr            := H.A with
        Ghost;
  begin
     H.Size := Size;
     for J in M .. Old_Size loop
        if H.A (J) < H.A (1) then
  	 Pop_Heap (H);
  	 Swap_Array (H.A, M - 1, J);
  	 H.Size := Size;
  	 A_Save := H.A;
  	 Push_Heap (H);
  	 Prove_Lower_Bound (H.A, A_Save, M, J);
  
        end if;
        Upper_Bound_Heap (H, H.A (1));
        pragma Loop_Invariant (H.Size = Size);
        pragma Loop_Invariant (Is_Heap_Def (H));
        pragma Loop_Invariant (Upper_Bound (H.A (1 .. M - 1), H.A (1)));
        pragma Loop_Invariant (Lower_Bound (H.A (M .. J), H.A (1)));
        pragma Loop_Invariant (Multiset_Unchanged (H.A, H'Loop_Entry.A));
        pragma Loop_Invariant
  	(if J < MAX_SIZE then
  	   H.A (J + 1 .. MAX_SIZE) = H'Loop_Entry.A (J + 1 .. MAX_SIZE));
     end loop;
     A_Save := H.A;
     Sort_Heap (H);
  
     H.Size := Old_Size;
     Prove_Partition (H.A, A_Save, M, Old_Size);
  end Partial_Sort_Heap;
#+END_SRC

The ~Size~ constant is equal to the size of the encapsulated
array that is a heap. ~Old_Size~ is equal to the size of the
~Heap~ ~H~, which will be equal to the length of the array used
in ~Partial_Sort~. At each iteration, the first element of the
encapsulated array is (of course) the greatest in the heap (we
use the same lemma as in [[file:../heap/Pop_Heap.org][Pop_Heap]], ~Upper_Bound_Heap~), and is
less than every element encountered between ~M~ and ~J~. If the
~J + 1~ th element is less than the first, we pop the heap, swap
the first element which is now at index ~M - 1~ with the ~J + 1~
th and then we push the heap. The ~Prove_Lower_Bound~ lemma is
used to prove the loop invariant with
~Lower_Bound~. ~Prove_Partition~ is a lemma that will help
proving that after sorting the heap, the array remains a
partition. It is described in the following.

** Lemmas used to prove Partial_Sort_Heap

We need a bunch of lemmas to prove ~Partial_Sort_Heap~. We define
first new "classic" lemmas about occurrences of elements in an
array, then lemmas on bounds and finally the main lemmas to prove
the partitioning.

*** New classic lemmas

The first lemma proves that if ~Occ (A, V)~ is greater or equal
to ~1~, then ~Has_Value (A, V)~ is true. The specification of
~Occ_To_Has_Value~ is:

#+BEGIN_SRC ada
  procedure Occ_To_Has_Value
    (A : T_Arr;
     V : T) with
     Pre  => A'Length >= 1 and then Occ (A, V) >= 1,
     Post => Has_Value (A, V);
#+END_SRC

Is implementation is:

#+BEGIN_SRC ada
  procedure Occ_To_Has_Value
    (A : T_Arr;
     V : T)
  is
  begin
     if A'Length = 1 then
        return;
     end if;
     if A (A'Last) = V then
        return;
     else
        Occ_To_Has_Value (Remove_Last (A), V);
     end if;
  
  end Occ_To_Has_Value;
#+END_SRC

We have also implemented the other way of the equivalence as a
lemma: if ~Has_Value (A, V)~ is true, then ~Occ (A, V)~ is
greater or equal to ~1~.

#+BEGIN_SRC ada
  procedure Has_Value_To_Occ
    (A : T_Arr;
     V : T) with
     Pre  => A'Length >= 1 and then Has_Value (A, V),
     Post => Occ (A, V) >= 1;
#+END_SRC

#+BEGIN_SRC ada
  procedure Has_Value_To_Occ
    (A : T_Arr;
     V : T)
  is
  begin
     if A'Length = 1 then
        pragma Assert (A (A'First) = V);
        return;
     end if;
  
     if A (A'Last) = V then
        pragma Assert (Occ (Remove_Last (A), V) >= 0);
        pragma Assert (Occ (A, V) >= 1);
        return;
     else
        Has_Value_To_Occ (Remove_Last (A), V);
     end if;
  end Has_Value_To_Occ;
#+END_SRC

For further details about the implementations, please refer to
functions such as [[file:../mutating/Remove_Copy.org][Remove_Copy]] or [[file:../mutating/Random_Shuffle.org][Random_Shuffle]].

*** The Prove_Lower_Bound lemma

The ~Prove_Lower_Bound~ lemma helps proving the ~Lower_Bound~
loop invariant.  Before calling ~Push_Heap (H)~ in
~Partial_Sort_Heap~, the assertion ~Lower_Bound (H.A (M .. J),
     H.A (K))~ for all ~K in 1 .. M - 1~ is proved. After executing
~Push_Heap (H)~, the provers cannot prove it anymore. We will
thus apply our classic trick: make a backup of ~H.A~ before
pushing the heap, and then use this lemma to prove that the lower
bound property is verified.

The specification of the lemma is:

#+BEGIN_SRC ada
  procedure Prove_Lower_Bound
    (A, A_Save : T_Arr;
     M, J      : Positive) with
     Pre => A'Length > 0 and then M in A'First + 1 .. A'Last
     and then J in A'Range and then A_Save'First = A'First
     and then A_Save'Last = A'Last and then A'First = 1
     and then A'Last = MAX_SIZE
     and then
     (for all K in 1 .. M - 1 => Lower_Bound (A_Save (M .. J), A_Save (K)))
     and then Multiset_Unchanged (A, A_Save)
     and then (for all K in M .. MAX_SIZE => A (K) = A_Save (K)),
     Post => Lower_Bound (A (M .. J), A (1));
#+END_SRC

The implementation will follow the following sketch:

- we suppose ~Multiset_Unchanged (A, A_Save)~ and ~for all K in M
         .. MAX_SIZE => A (K) = A_Save (K)~, then we have
  ~Multiset_Unchanged(A (1 .. Eq - 1), A_Save (1 .. Eq - 1))~.
- ~Has_Value (A (1 .. Eq - 1), A (1))~ is true, therefore ~Occ(A
         (1 .. Eq - 1),A(1)) >= 1~.
- ~Multiset_Unchanged(A (1 .. Eq - 1), A_Save (1 .. Eq - 1))~ is
  true therefore ~Occ(A (1 .. Eq - 1),A(1)) = Occ(A_Save (1
         .. Eq - 1),A(1))~ then ~Occ(A_Save(1 .. Eq - 1), A(1)) >= 1~.
- ~Occ(A_Save(1 .. Eq - 1), A(1)) >= 1~ thus ~Has_Value(A_Save (1
         .. Eq - 1),A(1))~.
- ~for all K in 1 .. M - 1 => Lower_Bound (A_Save (M .. J),
         A_Save (K))~ then for the specific index where ~A(1)~ is, it is
  also true too.

The implementation of this lemma is finally:

#+BEGIN_SRC ada
  procedure Prove_Lower_Bound
    (A, A_Save : T_Arr;
     M, J      : Positive)
  is
  begin
     Multiset_With_Eq (A, A_Save, M);
     Has_Value_To_Occ (A (1 .. M - 1), A (1));
     Occ_To_Has_Value (A_Save (1 .. M - 1), A (1));
  
  end Prove_Lower_Bound;
#+END_SRC

*** The Prove_Partition lemma

This lemma is our final lemma and helps proving that an array ~A~
that verifies the ~Partition~ property on the ~M~ th value will
continue to verify the property if we sort it before ~M~. We will
thus consider in the lemma two arrays ~A~ and ~A_Save~, such that
~A_Save~ is a permutation of ~A~ and is equal to ~A~ starting
from an index ~M~. The specification of the lemma is:

#+BEGIN_SRC ada
  procedure Prove_Partition
    (A, A_Save : T_Arr;
     M, Size   : Positive) with
     Pre => A'Length > 0 and then M in A'First + 1 .. Size
     and then Size in A'Range and then A_Save'First = A'First
     and then A_Save'Last = A'Last and then A'First = 1
     and then A'Last = MAX_SIZE and then Partition (A_Save, M, Size)
     and then Multiset_Unchanged (A, A_Save)
     and then (for all K in M .. MAX_SIZE => A (K) = A_Save (K)),
     Post => Partition (A, M, Size);
#+END_SRC

The implementation is similar to the previous one, except for the
fact that we want to prove the ~Partition~ predicate for all ~K~
in a certain range. It is therefore the following:

#+BEGIN_SRC ada
  procedure Prove_Partition
    (A, A_Save : T_Arr;
     M, Size   : Positive)
  is
  begin
     Multiset_With_Eq (A, A_Save, M);
     for J in A'First .. M - 1 loop
        Has_Value_To_Occ (A (1 .. M - 1), A (J));
        Occ_To_Has_Value (A_Save (1 .. M - 1), A (J));
  
        pragma Loop_Invariant
  	(for all K in 1 .. J => (for all L in M .. Size => A (K) <= A (L)));
     end loop;
  end Prove_Partition;
#+END_SRC

Using ~GNATprove~, the lemmas and their implementations are
proved.

** Implementation of ~Partial_Sort~

The point here is to prepare a ~Heap~ to apply ~Partial_Sort_Heap~
on it. We first make a heap with the ~M - A'First~ first elements
of ~A~ and we add the following elements one by one, preserving
the ~Multiset_Unchanged~ predicate using the ~New_Element~ lemma
described in [[file:../heap/Make_Heap.org][Make_Heap]]. We finally apply the ~Partial_Sort_Heap~
function to our heap. Notice that all preconditions of
~Partial_Sort_Heap~ are verified, as ~M > A'First~. The only thing
remaining is to prove the ~Multiset_Unchanged~ preservation, which
is done by playing with a backup of ~A~

#+BEGIN_SRC ada
  procedure Partial_Sort
    (A : in out T_Arr;
     M :        Positive)
  is
     H      : Heap;
     A_Save : T_Arr := H.A with
        Ghost;
     A_Old : constant T_Arr := A with
        Ghost;
     Size : constant Natural := A'Length;
  begin
     if Size > 0 and then M > A'First then
        H := Make_Heap (A (A'First .. M - 1));
        for J in M .. A'Last loop
  	 pragma Assert (Is_Heap_Def ((A => H.A, Size => M - A'First)));
  	 A_Save := H.A;
  
  	 Unchanged_Transitivity
  	   (A_Old (A'First .. J - 1), H.A (1 .. J - A'First),
  	    A_Save (1 .. J - A'First));
  	 H.A (J - A'First + 1) := A (J);
  	 Unchanged_Transitivity
  	   (A_Old (A'First .. J - 1), A_Save (1 .. J - A'First),
  	    H.A (1 .. J - A'First));
  	 New_Element (A_Old (A'First .. J), H.A (1 .. J - A'First + 1));
  
  	 pragma Loop_Invariant
  	   (Multiset_Unchanged
  	      (A_Old (A'First .. J), H.A (1 .. J - A'First + 1)));
  	 pragma Loop_Invariant
  	   (Is_Heap_Def ((A => H.A, Size => M - A'First)));
        end loop;
  
        A_Save := H.A;
        Unchanged_Transitivity (A_Old, H.A (1 .. Size), A_Save (1 .. Size));
        H.Size := Size;
  
        Partial_Sort_Heap (H, M - A'First + 1);
        if Size < MAX_SIZE then
  	 Multiset_With_Eq (H.A, A_Save, Size + 1);
        end if;
        Unchanged_Transitivity (A_Old, A_Save (1 .. Size), H.A (1 .. Size));
        A := H.A (1 .. Size);
        Unchanged_Transitivity (A_Old, H.A (1 .. Size), A);
     end if;
  
  end Partial_Sort;
#+END_SRC

Using this implementation and specification, ~GNATprove~ proves
the ~Partial_Sort~ algorithm.
