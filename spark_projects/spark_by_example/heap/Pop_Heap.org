# Created 2018-09-25 Tue 10:58
#+OPTIONS: author:nil title:nil toc:nil
#+EXPORT_FILE_NAME: ../../../heap/Pop_Heap.org

* The Pop_Heap algorithm

The ~Pop_Heap~ procedure will remove the root (and thus the
greatest) element of the heap, and rearrange the other elements to
preserve the heap structure. Its signature is the following:

#+BEGIN_SRC ada
  procedure Pop_Heap (H : in out Heap)
#+END_SRC

** Specification of Pop_Heap

We first present the specification of the algorithm. ~Pop_Heap~
should remove the first element of the heap, rearrange the
~H.Size-1~ remaining elements so that the heap structure is
preserved on those elements, which will then occupy the ~H.Size-1~
indexes of the array.  The procedure will then reinsert the
removed element at index ~H.Size~, which was no longer used.

With these considerations in mind, the specification for
~Pop_Heap~ is:

#+BEGIN_SRC ada
  procedure Pop_Heap (H : in out Heap) with
     Pre  => H.Size >= 1 and then Is_Heap_Def (H),
     Post => Multiset_Unchanged (H.A, H'Old.A)
     and then H'Old.Size = H.Size + 1 and then Is_Heap_Def (H)
     and then H.A (H.Size + 1) = H'Old.A (1)
     and then
     (if H'Old.Size /= H'Old.A'Last then
        (for all J in H'Old.Size + 1 .. H.A'Last => H.A (J) = H'Old.A (J)))
     and then Max_Element_Def (H.A (1 .. H.Size + 1), H.Size + 1);
#+END_SRC

The preconditions state that in order to remove an element from
the heap, the heap must not be empty, and the record of type ~Heap~
used as parameter must be a correct heap data structure.

The postconditions express that:
- the number of occurrences of each element of ~T~ in ~H~ have not
  changed
- the number of elements in the heap data structure is one less
- ~H~ still represents a correct heap data structure
- the first element of ~H'Old.A~ will be placed at index
  ~H.Size+1~, bearing in mind that ~H.Size~ has been decreased by
  one during the procedure
- the element found at indexes greater than ~H'Old.Size~ are
  unchanged
- the element found at index ~H.Size+1~ after the procedure will
  be the greatest element among the ~H.Size+1~ first elements of
  ~H~ (the greatest value has been removed)

** Predicates and lemmas used

In order to correctly specify and implement ~Pop_Heap~ we need to
write a few lemmas and predicates.

*** The Max_Element_Def predicate

This predicate defines if a given index contains the maximum
element of a given array:

#+BEGIN_SRC ada
  function Max_Element_Def
    (A   : T_Arr;
     Max : Natural)
     return Boolean is (Max in A'Range and then Upper_Bound (A, A (Max)));
#+END_SRC

*** The predicate Heap_Maximum_Child

#+BEGIN_SRC ada
  function Heap_Maximum_Child
    (H : Heap;
     P : Positive;
     C : Positive)
     return Boolean is
    (Is_Heap_Def (H) and then H.Size in 2 .. Positive'Last - 1
     and then P in 1 .. H.Size / 2 and then C in 2 .. H.Size
     and then P = Heap_Parent (C)
     and then (if Heap_Left (P) <= H.Size then H.A (Heap_Left (P)) <= H.A (C))
     and then
     (if Heap_Right (P) <= H.Size then H.A (Heap_Right (P)) <= H.A (C)));
#+END_SRC

This predicates verifies for a given ~Heap~ record and two
indexes ~P~ and ~C~ that:

- ~H~ represents a heap data structure
- there are at least two elements in the heap represented by ~H~
- ~P~ is in the correct range and have children
- ~C~ represents a children of ~P~ in the heap and the value at
  index ~C~ must be the greatest of the two values found at the
  indexes of the children of ~P~

*** The Maximum_Heap_Child function

This function returns an option containing, for a given heap ~H~
and a given index ~P~, the child of P for which the associated
value is the greatest *if it such child exists in the heap*.

Its specification is as follows:

#+BEGIN_SRC ada
  function Maximum_Heap_Child
    (H : Heap;
     P : Positive)
     return Option with
     Pre => H.Size in 2 .. Positive'Last - 1 and then P in 1 .. H.Size - 1
     and then Is_Heap_Def (H),
     Contract_Cases =>
     (H.Size / 2 < P => not Maximum_Heap_Child'Result.Exists,
      others         =>
        Maximum_Heap_Child'Result.Exists
        and then Heap_Maximum_Child (H, P, Maximum_Heap_Child'Result.Value)
        and then Maximum_Heap_Child'Result.Value in P + 1 .. H.Size
        and then P = Heap_Parent (Maximum_Heap_Child'Result.Value));
#+END_SRC

The preconditions express that ~H~ represents a heap data
structure with at least two elements and that ~P~ is a valid
parent index. The postconditions are expressed through contract
cases:
- if the children of ~P~ are not represented in the heap, then
  there the returned option value is empty
- otherwise the returned value complies with the definitions of
  the maximum child given by the previous predicate

This function can be implemented in the following way:

#+BEGIN_SRC ada
  function Maximum_Heap_Child
    (H : Heap;
     P : Positive)
     return Option
  is
     Right, Left : Positive;  -- storage for the two childs.
  begin
     if P <= H.Size / 2 then
        Right := 2 * P + 1;
        Left  := Right - 1;
        if Right <= H.Size then
  	 return (Exists => True,
  	    Value => (if H.A (Right) <= H.A (Left) then Left else Right));
        else
  	 return (Exists => True, Value => Left);
        end if;
     else
        return (Exists => False);
     end if;
  
  end Maximum_Heap_Child;
#+END_SRC

The implementation is quite straightforward, as there are no
loops or calls to other functions. The program does not need
annotations to be proved.

*** Heap lemmas

We present here two lemmas concerning the properties of heap when
modifying an element or concerning the order of the elements.

The first one is called ~Heap_Set~:

#+BEGIN_SRC ada
  procedure Heap_Set
    (H1 : Heap;
     H2 : Heap;
     P  : Positive;
     C  : Positive) with
     Pre => H1.Size = H2.Size and then C in 2 .. H1.Size and then P in 1 .. C
     and then P = Heap_Parent (C) and then Heap_Maximum_Child (H1, P, C)
     and then Is_Heap_Def (H1) and then Is_Set (H1.A, P, H1.A (C), H2.A),
     Post => Is_Heap_Def (H2);
#+END_SRC

In this lemma, we prove that replacing the value at index ~P~ in
a heap by the value found at the maximum child of ~P~ does not
change the heap properties. More specifically, here the
preconditions, which act as hypotheses in the lemma:
- the two heaps ~H1~ and ~H2~ must have the same size
- ~C~ is the child of greatest value of ~P~ in ~H1~
- ~H1~ verifies all the properties of a heap
- ~H2~ is equal to ~H1~ to the exception of the index ~P~ which
  is equal to ~H1.A(C)~

The postcondition expresses the fact that if these hypothesis are
respected, then ~H2~ should respect the properties defining a
heap.

The body of the procedure only consists of the instruction
~null;~, as guiding Spark by giving him the rigth hypothesis to
work with is enough to prove the lemma.

#+BEGIN_SRC ada
  procedure Heap_Set
    (H1 : Heap;
     H2 : Heap;
     P  : Positive;
     C  : Positive)
  is
  begin
     null;
  end Heap_Set;
#+END_SRC

The second lemma is called ~Upper_Bound_Heap~:

#+BEGIN_SRC ada
  procedure Upper_Bound_Heap
    (H : Heap;
     V : T) with
     Pre  => H.Size >= 1 and then Is_Heap_Def (H) and then V >= H.A (1),
     Post => (for all J in 1 .. H.Size => V >= H.A (J));
#+END_SRC

This lemma is here to make the solvers aware that if ~H~ respects
the heap properties, and if ~V~ is greater than the first element
of ~H~, then ~V~ is greater than all the others elements of
~H~. This can be proved by induction with the relations between
parents and children, but ~GNATprove~ can prove this lemma
automatically, so the body of the procedure only consists of the
~null;~ instruction. The loop invariant builds the expected
property:

#+BEGIN_SRC ada
  procedure Upper_Bound_Heap
    (H : Heap;
     V : T)
  is
  begin
     for J in 1 .. H.Size loop
        pragma Loop_Invariant (for all K in 1 .. J => V >= H.A (K));
     end loop;
  end Upper_Bound_Heap;
#+END_SRC

When proving ~Upper_Bound_Heap~ spark issues a warning:

#+BEGIN_SRC shell
  heap_lemmas.ads:27:06: warning: postcondition does not check the outcome of calling "Upper_Bound_Heap"
#+END_SRC

This is of course true, as all procedure parameters are ~in~ and
the postcondition only use these parameters. We suppress this
warning by adding the following instruction in the package
containing the lemmas (as it is done in the [[https://github.com/AdaCore/spark2014/blob/master/include/spark-constrained_array_lemmas.ads][SPARK Lemma Library]]):

#+BEGIN_SRC ada
  pragma warnings
    (off, "postcondition does not check the outcome of calling");
#+END_SRC

** Implementation of Pop_Heap

The code with all the annotations is quite difficult to read, it
might be better to look at the code without annotations to
understand the working principle of the algorithm:

#+BEGIN_SRC ada
  procedure Pop_Heap (H : in out Heap) is
     V  : T := H.A (1);
     Hole  : Positive         := 1;
     Child  : Option;
     Interm : T_Arr (H.A'Range) :=
       H.A;  -- should be ghost, but there are some operations done with this variable
     A_Init : T_Arr (H.A'Range) := H.A with
        Ghost;  -- initial array backup
  begin
     if H.A (H.Size) < V
     then  --nothing to be done otherwise (H.A is "constant")
        Child := Maximum_Heap_Child (H, Hole);
        while Child.Exists and then Child.Value < H.Size
  	and then H.A (H.Size) < H.A (Child.Value)
        loop
  
  	 Swap_Array
  	   (Interm, Hole,
  	    Child
  	      .Value); -- permutation approach: preserves multiset but not heap structure
  
  	 H.A (Hole) :=
  	   H.A
  	     (Child
  		.Value);  -- moving "hole" approach: preserves heap structure but not multiset structure.
  
  	 Hole := Child.Value;
  	 Child := Maximum_Heap_Child (H, Hole);
  
        end loop;
  
        H.A (Hole) := H.A (H.Size);
  
        H.A (H.Size) := V;
        Swap_Array (Interm, Hole, H.Size);
  
     else
     end if;
  
     H.Size := H.Size - 1;
  
  end Pop_Heap;
#+END_SRC

The idea behind the procedure is the following:

1. the first value of the heap (which will be removed) is stored
   in ~V~. There is now a "hole" in the heap, represented by index
   ~Hole~, that needs to go down, while preserving the heap
   structure
2. the child of maximum value of the hole is exchanged with the
   hole in order to guarantee the heap property. This step is
   repeated until the value of the next child is less than the
   value of the last element (to be sure to rebalance the whole
   heap)
3. when exiting the loop, the hole is replaced by the last element
   of the heap. We then consider that the heap has only ~H.Size-1~
   elements, and the element removed at the begining of the
   algorithm is placed at the index ~H.Size~ and can thus be
   retrieved by the caller.

The implementation for ~Pop_Heap~ with all necessary assertions
is the following:

#+BEGIN_SRC ada
  procedure Pop_Heap (H : in out Heap) is
     V  : T := H.A (1);
     C1 : Positive with
        Ghost;
     Hole  : Positive         := 1;
     Sizes : constant Integer := H.Size with
        Ghost;
     Child  : Option;
     Interm : T_Arr (H.A'Range) :=
       H.A;  -- should be ghost, but there are some operations done with this variable
     A_Init : T_Arr (H.A'Range) := H.A with
        Ghost;  -- initial array backup
     Save : Heap := H with
        Ghost;  -- intermediary ghost heap.
  begin
     pragma Assert (V = A_Init (1));
     if H.A (H.Size) < V
     then  --nothing to be done otherwise (H.A is "constant")
        pragma Assert (H.Size >= 2);
        Child := Maximum_Heap_Child (H, Hole);
        if Child.Exists then
  	 C1 := Child.Value;
        else
  	 C1 := H.Size + 1;
        end if;
  
        pragma Assert (Is_Heap_Def (H));
        while Child.Exists and then Child.Value < H.Size
  	and then H.A (H.Size) < H.A (Child.Value)
        loop
  
  	 Save := H;
  
  	 pragma Assert
  	   (Hole in Interm'Range
  	    and then Child.Value in Interm'Range); -- precondition checking
  
  	 Swap_Array
  	   (Interm, Hole,
  	    Child
  	      .Value); -- permutation approach: preserves multiset but not heap structure
  
  	 pragma Assert (Is_Heap_Def (Save));
  	 pragma Assert (H.A (Hole) >= H.A (Child.Value));
  
  	 H.A (Hole) :=
  	   H.A
  	     (Child
  		.Value);  -- moving "hole" approach: preserves heap structure but not multiset structure.
  
  	 pragma Assert (Child.Exists);
  	 pragma Assert (C1 <= H.Size);
  	 pragma Assert (C1 >= 2 and then 1 = Heap_Parent (C1));
  	 pragma Assert (H.A (1) = A_Init (C1));
  	 pragma Assert (Is_Set (Save.A, Hole, Save.A (Child.Value), H.A));
  	 Heap_Set
  	   (Save, H, Hole,
  	    Child
  	      .Value); -- guide to automatic solvers, helps them keep track of the modifications.
  
  	 pragma Assert (H.Size >= 2);
  	 pragma Assert (Child.Value in H.A'Range);
  	 pragma Assert (V >= H.A (1));
  	 Upper_Bound_Heap (H, V);   -- guide to upper_bound verification
  	 pragma Assert (H.Size <= H.A'Last);
  
  	 pragma Loop_Invariant
  	   (if Sizes /= H.A'Last then
  	      (for all J in H.Size + 1 .. H.A'Last =>
  		 H.A (J) = H'Loop_Entry.A (J)));
  	 pragma Loop_Invariant (H.A (1) = H'Loop_Entry.A (C1));
  	 pragma Loop_Invariant (Child.Exists);
  	 pragma Loop_Invariant (Child.Value < H.Size);
  	 pragma Loop_Invariant (H.Size = H'Loop_Entry.Size);
  	 pragma Loop_Invariant (Hole in 1 .. H.Size - 1);
  	 pragma Loop_Invariant (Hole < Child.Value);
  	 pragma Loop_Invariant (H.A (Hole) > H.A (H.Size));
  	 pragma Loop_Invariant
  	   (if Hole /= 1 then H.A (H.Size) < H.A (Heap_Parent (Hole)));
  	 pragma Loop_Invariant
  	   (if Child.Value < H.Size then Hole = Heap_Parent (Child.Value));
  	 pragma Loop_Invariant (Heap_Maximum_Child (H, Hole, Child.Value));
  	 pragma Loop_Invariant (H.Size in H.A'Range);
  	 pragma Loop_Invariant (Upper_Bound (H.A (1 .. Sizes), V));
  	 pragma Loop_Invariant (Multiset_Unchanged (A_Init, Interm));
  	 pragma Loop_Invariant (Is_Set (H.A, Child.Value, V, Interm));
  	 pragma Loop_Invariant (Is_Heap_Def (H));
  	 pragma Loop_Variant (Decreases => H.Size - Hole);
  
  	 Hole := Child.Value;
  	 pragma Assert (Hole < H.Size);
  	 Child := Maximum_Heap_Child (H, Hole);
  
        end loop;
  
        Save := H;
  
        pragma Assert
  	(if Child.Exists and then Child.Value < H.Size and then Hole /= 1
  	 then H.A (H.Size) < H.A (Heap_Parent (Hole)));
  
        H.A (Hole) := H.A (H.Size);
  
        pragma Assert
  	(Is_Set
  	   (Save.A, Hole, Save.A (H.Size),
  	    H.A));  -- checks to help prove heap structure.
        pragma Assert (Is_Heap_Def (H));
  
        H.A (H.Size) := V;
        Swap_Array (Interm, Hole, H.Size);
  
        pragma Assert
  	(if Sizes /= H.A'Last then
  	   (for all J in H.Size + 1 .. H.A'Last => H.A (J) = A_Init (J)));
  
     else
        pragma Assert (H.A (H.Size) >= H.A (1));
        Upper_Bound_Heap (H, H.A (1));
        pragma Assert
  	(H.A (H.Size) =
  	 H.A
  	   (1));  -- if nothing was done we verify that the last element and first element of the heap are equal (should be since the array is constant)
     end if;
  
     pragma Assert
       (Interm =
        H.A);  -- verify that swap approach and hole approach give same result
     for V in T loop
        Occ_Equal (Interm, H.A, V);
        pragma Loop_Invariant
  	(for all F in T'First .. V =>
  	   Occ (Interm, F) =
  	   Occ
  	     (H.A,
  	      F));  --verify that Interm and H.A represent same the same set of values
     end loop; -- loop on all values of T
  
     pragma Assert (Multiset_Unchanged (Interm, H.A));
  
     pragma Assert (V = H.A (H.Size));
     H.Size := H.Size - 1;
  
     pragma Assert (H.A'Length >= H.Size + 1);
     if H.Size >= 1 then
        Upper_Bound_Heap (H, H.A (H.Size + 1));
     end if;
  
  end Pop_Heap;
#+END_SRC

We have first to define some ghost variables to help us with the
lemmas in the implementation:

- ~C1~ holds the maximum child of the first element. It is useful
  when proving that the first element of ~H~ remains constant
  through the loop
- ~Sizes~ simply holds the size of ~H~. It is used to fix an issue
  with an array index check
- ~Interm~ is used to compare the approach of swapping the
  elements at indexes ~Hole~ and ~Child.Value~, which acts as a
  permutation, instead of simply replacing the value of the hole
  by the one of it's child, which preserves the heap structure
- ~Init~ holds the state of ~H~ before the execution of the
  algorithm
- ~Save~ is used as a temporary variable to compare the state of
  the heap between various points of the algorithm

The implementation is full of assertions, most of them helping to
verify the preconditions of the lemmas and predicates that are
used in assertions. The following paragraphs explain the process
guiding the prove of the program.

The first thing to notice is that the working principle of the
algorithm is quite similar to [[Push_Heap.org][Push_Heap]], so the same approach
could have been taken to prove the postcondition
~Multiset_Unchanged (H'Old.A, A)~ with the help of the predicates
~Multiset_Add~ and ~Multiset_Minus~. This approach was necessary
in [[Push_Heap.org][Push_Heap]] because when moving the "hole" up the heap, the
number of occurrences varies but the heap structure is preserved.

This is no more the case here. To prove the postcondition, we
duplicate the array at the beginning of the algorithm, and at each
iteration we swap the values found at indexes ~Child.Value~ and
~Hole~. This approach does not preserve the structure of heap, but
verifies that only permutations are applied to the array.

Let us take a look at the ~while~ loop. First, we save the value
of ~H~ in ~Save~. This is necessary to help the solvers assess the
changes that will occur during the loop. We then swap the values
at indexes ~Hole~ and ~Child.Value~ for ~Interm~ and replace the
value found at index ~Hole~ by the one found at
~Child.Value~. Remember that ~Interm~ is a copy of the array in
~H~. As mentioned before, this "swap" approach aims to prove the
~Multiset_Unchanged~ postcondition. The ~Swap_Array~ procedure
ensures this through its postconditions, so there is no need to
annotate this part of the code.

The value at ~Hole~ and its child are then really swapped in ~H~,
~GNATprove~ does not manage to prove that the heap structure is
preserved. In order to help the provers prove that the heap
property is preserved, we call the lemma ~Heap_Set~. All the
preceding assertions are here to verify the hypothesis of the
lemma. Now that it is proved that ~H~ is still a heap, we can use
the order properties of the heap data structure in order to prove
that the element removed at the begining of the procedure is an
upper bound for the heap. This is done by calling the lemma
~Upper_Bound_Heap~. With these two instantiated lemmas we have
everything we need in order to prove the loop invariants.

The loop invariants (in order of appearance) ensure that:
1. all the values found at indexes greater than ~H.Size~ remain
   unchanged
2. the first element of the heap remains constant after the first
   swap. This is useful to prove that the element we removed is
   greater than all the elements left in the heap
3. the next 8 loop invariants check that various preconditions to
   the predicates used later hold true *at this point* in the loop
4. ~V~ is an upper-bound for the remaining elements in the
   Heap. Notice that in the call to ~Upper_Bound~ we use ~Sizes~
   and not ~H.Size~ (which are equal in value throughout the loop)
   to avoid an an ~range check might fail~ error from GNATprove
5. ~Interm~ is a permutation of the initial array
6. ~Interm~ is equal to ~H.A~ to the exception of index
   ~Child.Value~, which is equal to ~V~. This loop invariant helps
   the solvers keep track of the differences between ~Interm~ and
   ~H.A~
7. ~H~ has a heap structure

The only remaining thing left in the loop is the update of ~Child~
and ~Hole~. Since we use a ~while~ loop we need to specify that
~H.Size - Hole~ decreases as a loop variant.

After exiting the loop, we are left with three variable
assignments, and without annotating them the proof of the
postconditions is impossible. The reason is that there are
multiple causes for exiting the wile loop, and the exit conditions
have non trivial implications on the values of ~Hole~, ~Child~ and
the state of the heap. We detail what the exit conditions are,
what they implicate and the annotations that were added to help
the solvers understand what is going on.

When exiting the loop, ~Child~ is the ~Maximum_Heap_Child~ of
~Hole~. It is always true that ~H.A(Hole) > H.A(H.Size)~ when
exiting the loop (otherwise, the loop would have exited in the
previous iteration). This ensures that executing ~H.A(Hole) :=
    H.A(H.Size)~ preserves the heap structure. The case when the loop
is exited because ~Child.Exists~ is equal to ~False~ corresponds
to the case where ~Hole~ has no children. The solvers can keep
track of what is happening, so there is no need to add any
assertions.

When we exit the loop with ~Child.Exists~ holding and ~Child.Value
    = H.Size~ then the affectation acts as if we did one more
iteration of the loop, so there is nothing to add here. When the
loop is exited because ~Child.Exists~ holds and ~Child.Value <
    H.Size~, then ~H.A(Child.Value) <= H.A(H.Size)~. In that case, the
solvers need a bit of guidance to understand that replacing the
value found at ~Hole~ by the one found at ~H.Size~ will preserve
the heap structure. This is due to the fact ~GNATprove~ does not
remember that in the previous iteration the parent of ~Hole~ had a
value strictly greater than the value found at ~H.Size~. This is
corrected with the assertion right after the loop

We then replace the value found at index ~Hole~. The two following
assertions help prove the conservation of the heap structure. The
value found at index ~H.Size~ is then replaced by the value saved
at the begining of the algorithm, the values found at indexes
~Hole~ and ~H.Size~ in ~Interm~ are swapped, which is equivalent
to the two previous affectations donne in ~H.A~. We check that the
other indexes were not modified, and this concludes the
modifications that will be done to the arrays.

The ~else~ case of the main condition verifies that if we do not
have ~H.A(1) > H.A(H.Size)~ at the beginning of the algorithm,
then ~H.A(1) = H.A(H.Size))~. (This is true because the array is
constant and this can be proved with the heap properties).

What is left to check is that our two manipulations (swapping on
~Interm~ and replacing on ~H~) give the same result. With a
similar technique used in the proof of [[file:../mutating/Random_Shuffle.org][Swap_Array]] we prove the
~Multiset_Unchanged~ postcondition. The last few annotations
verify the ~Max_Element~ postcondition.

This concludes our implementation of ~Pop_Heap~. This
implementation is fully proved by ~GNATprove~, but requires the
use of a high level of proof (level 4) and requires 5 minutes of
pooving time, due to the amount of verification conditions being
generated by GNATprove.
