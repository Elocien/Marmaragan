# Created 2018-09-25 Tue 10:57
#+OPTIONS: author:nil title:nil toc:nil
#+EXPORT_FILE_NAME: ../../../heap/Is_Heap.org

* The Is_Heap function

The ~Is_Heap~ function verifies that the given parameter respects
the properties defining the [[https://en.wikipedia.org/wiki/Heap_(data_structure)][heap data structure]]. Its signature is:

#+BEGIN_SRC ada
  function Is_Heap (H : Heap) return Boolean
#+END_SRC

** The Heap type and the associated predicates

Heaps are usually represented by complete binary trees, but as
SPARK prevents the use of access types, we choose another classic
representation using an array. A heap is therefore simply
represented by a record containing an array of type ~T_Arr~ and a
natural number representing the actual size of the heap. We have
chosen here to limit the capacity of the heap: the indexes of the
array belong to the range ~1 .. MAX_SIZE~ where ~MAX_SIZE~ is a
constant defined in ~types.ads~ whose value is ~1000~. The type
definition is as follows:

#+BEGIN_SRC ada
  type Heap is record
     A    : T_Arr (1 .. MAX_SIZE) := (others => 0);
     Size : Natural               := 0;
  end record;
#+END_SRC

We have to define predicates to compute the array index of the
parent, the left child and the right child of a given node of the
tree represented by its index in the array:

#+BEGIN_SRC ada
  function Heap_Parent
    (I : Positive)
     return Positive is (I / 2) with
     Pre => I > 1;
#+END_SRC

#+BEGIN_SRC ada
  function Heap_Left
    (I : Positive)
     return Positive is (2 * I) with
     Pre => I <= (Positive'Last) / 2;
#+END_SRC

#+BEGIN_SRC ada
  function Heap_Right
    (I : Positive)
     return Positive is (2 * I + 1) with
     Pre => I <= (Positive'Last - 1) / 2;
#+END_SRC

** The Is_Heap_Def predicate

In order to specify our function we need to write a predicate
formally defining what a correct heap is:

#+BEGIN_SRC ada
  function Is_Heap_Def
    (H : Heap)
     return Boolean is
    (H.Size <= H.A'Last
     and then
     (H.Size = 0
      or else
      (for all I in 2 .. H.Size => H.A (I) <= H.A (Heap_Parent (I)))));
#+END_SRC

This predicate checks that the actual size of the heap is less
than the last index of the array storing the heap and that the
heap is either empty or that for all index ~I~ greater than two,
then the value at index ~I~ is less than the value of the parent
of ~I~.

** Specification of Is_Heap

The ~Is_Heap~ can be specified as follows:

#+BEGIN_SRC ada
  function Is_Heap
    (H : Heap)
     return Boolean with
     Post => Is_Heap'Result = Is_Heap_Def (H);
#+END_SRC

There is no precondition on our ~Heap~ record, and the only
postcondition is that ~Is_Heap~ returns the same result as our
previously defined predicate.

** Implementation of Is_Heap

~Is_Heap~ can be implemented in the following way:

#+BEGIN_SRC ada
  function Is_Heap
    (H : Heap)
     return Boolean
  is
     Parent : Natural := 1;
  begin
     if H.Size > H.A'Length then
        return False;
     else
  
        if H.Size >= 1 then
  	 for Child in 2 .. H.Size loop
  
  	    if H.A (Parent) < H.A (Child) then
  	       return False;
  	    end if;
  
  	    pragma Loop_Invariant
  	      (1 <= Parent and then Parent < Child
  	       and then Child <= H.Size);
  	    pragma Loop_Invariant (Parent = Heap_Parent (Child));
  	    pragma Loop_Invariant (Is_Heap_Def ((A => H.A, Size => Child)));
  	    pragma Assert (if Child = H.Size then Is_Heap_Def (H));
  	    if Child mod 2 = 1 then
  	       Parent := Parent + 1;
  	    end if;
  
  	 end loop;
  	 pragma Assert (Is_Heap_Def (H));
        end if;
  
        return True;
     end if;
  
  end Is_Heap;
#+END_SRC

We first check that the member ~Size~ of ~H~ is valid, i.e. less
that the length of the record array. We then verify that for each
index that can be a child (~Child >=2~) the value found at its
parent's index is greater that the value found at the child's
index.

The loop invariants specify that:
- the variables ~Parent~ and ~Child~ are in the correct range and
  that ~Parent~ is less than ~Child~
- that ~Child~ is indeed a child of ~Parent~
- that the ~Heap~ record constituted of the original array, but
  with size set to ~Child~ is a heap. This checks that the first
  ~Child~ values of ~H.A~ form a heap.

With this specification and implementation, ~GNATprove~ proves everything.
