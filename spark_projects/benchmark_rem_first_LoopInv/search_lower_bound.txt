-- start file search_lower_bound_p.adb

package body Search_Lower_Bound_P with
   Spark_Mode
 is

   function Search_Lower_Bound
     (A : T_Arr;
      V : T)
      return Option
   is

      Result : Option  := (Exists => False);
      Right  : Integer := A'Last + 1;
      Middle : Integer := A'Last + 1;
   begin

      if A'Length = 0 then
         return Result;
      else
         Result := (Exists => True, Value => A'First);

         while Result.Value < Right loop
            Middle := Result.Value + (Right - Result.Value) / 2;
            if A (Middle) < V then
               Result.Value := Middle + 1;
            else
               Right := Middle;
            end if;

            pragma Loop_Invariant
              (A'First <= Result.Value and then Result.Value <= Right
               and then Right <= A'Last + 1);
            pragma Loop_Invariant
              (if Result.Value /= A'First then
                 Strict_Upper_Bound (A (A'First .. Result.Value - 1), V));
            pragma Loop_Invariant
              (if Right /= A'Last + 1 then
                 Lower_Bound (A (Right .. A'Last), V));

         end loop;

         return Result;
      end if;
   end Search_Lower_Bound;
end Search_Lower_Bound_P;

-- end file search_lower_bound_p.adb


-- start file search_lower_bound_p.ads

with Types;         use Types;
with Sorted_P;      use Sorted_P;
with Lower_Bound_P; use Lower_Bound_P;
with Upper_Bound_P; use Upper_Bound_P;

package Search_Lower_Bound_P with
   Spark_Mode
 is

   function Search_Lower_Bound
     (A : T_Arr;
      V : T)
      return Option with
      Pre            => Sorted (A) and then A'Last < Positive'Last,
      Contract_Cases => (A'Length = 0 => not Search_Lower_Bound'Result.Exists,
       A'Length > 0 =>
         Search_Lower_Bound'Result.Exists
         and then A'First <= Search_Lower_Bound'Result.Value
         and then Search_Lower_Bound'Result.Value <= A'Last + 1
         and then Strict_Upper_Bound
           (A (A'First .. Search_Lower_Bound'Result.Value - 1), V)
         and then Lower_Bound
           (A (Search_Lower_Bound'Result.Value .. A'Last), V));

end Search_Lower_Bound_P;

-- end file search_lower_bound_p.ads


-- start file types.ads

package Types is

   type T is new Integer;

   type T_Arr is array (Positive range <>) of T;

   type T_Option (OK : Boolean) is record
      case OK is
         when True =>
            Value : T;
         when False =>
            null;
      end case;
   end record;

   MAX_SIZE : constant := 1000;

   type Option (Exists : Boolean := False) is record
      case Exists is
         when True =>
            Value : Integer;
         when False =>
            null;
      end case;
   end record;

   type Option_Pair (Exists : Boolean := False) is record
      case Exists is
         when True =>
            Lower : Integer;
            Upper : Integer;
         when False =>
            null;
      end case;
   end record;

   type Heap is record
      A    : T_Arr (1 .. MAX_SIZE) := (others => 0);
      Size : Natural               := 0;
   end record;

end Types;

-- end file types.ads


-- start file sorted_p.ads

with Types; use Types;

package Sorted_P with
   Spark_Mode,
   Ghost
 is

   function Weakly_Sorted
     (A : T_Arr)
      return Boolean is
     (if A'Length > 0 then
        (for all J in A'First .. A'Last - 1 => A (J) <= A (J + 1)));

   function Sorted
     (A : T_Arr)
      return Boolean is
     (for all J in A'Range =>
        (for all I in A'First .. J - 1 => A (I) <= A (J)));

end Sorted_P;

-- end file sorted_p.ads


-- start file lower_bound_p.ads

with Types; use Types;

package Lower_Bound_P with
   Spark_Mode,
   Ghost
 is

   function Lower_Bound
     (A : T_Arr;
      V : T)
      return Boolean is (for all I in A'First .. A'Last => A (I) >= V);

   function Strict_Lower_Bound
     (A : T_Arr;
      V : T)
      return Boolean is (for all I in A'First .. A'Last => A (I) > V);

end Lower_Bound_P;

-- end file lower_bound_p.ads


-- start file upper_bound_p.ads

with Types; use Types;

package Upper_Bound_P with
   Spark_Mode,
   Ghost
 is
   function Upper_Bound
     (A   : T_Arr;
      Val : T)
      return Boolean is (for all I in A'Range => A (I) <= Val);

   function Strict_Upper_Bound
     (A   : T_Arr;
      Val : T)
      return Boolean is (for all I in A'Range => A (I) < Val);

   function Max_Element_Def
     (A   : T_Arr;
      Max : Natural)
      return Boolean is (Max in A'Range and then Upper_Bound (A, A (Max)));

end Upper_Bound_P;

-- end file upper_bound_p.ads