-- start file rotate_p.adb

package body Rotate_P with
   Spark_Mode
 is

   procedure Rotate
     (A : in out T_Arr;
      N :        Positive)
   is
   begin
      Reverse_In_Place (A (A'First .. A'First + (N - 1)));
      Reverse_In_Place (A (A'First + N .. A'Last));
      Reverse_In_Place (A);
   end Rotate;
end Rotate_P;

-- end file rotate_p.adb


-- start file rotate_p.ads

with Types;              use Types;
with Reverse_In_Place_P; use Reverse_In_Place_P;

package Rotate_P with
   Spark_Mode
 is

   procedure Rotate
     (A : in out T_Arr;
      N :        Positive) with
      Pre  => N < A'Length,
      Post => A'Old (A'First .. A'First + (N - 1)) =
      A (A'Last - (N - 1) .. A'Last)
      and then A'Old (A'First + N .. A'Last) = A (A'First .. A'Last - N);

end Rotate_P;

-- end file rotate_p.ads


-- start file types.ads

package Types is

   type T is new Integer;

   type T_Arr is array (Positive range <>) of T;

   type T_Option (OK : Boolean) is record
      case OK is
         when True =>
            Value : T;
         when False =>
            null;
      end case;
   end record;

   MAX_SIZE : constant := 1000;

   type Option (Exists : Boolean := False) is record
      case Exists is
         when True =>
            Value : Integer;
         when False =>
            null;
      end case;
   end record;

   type Option_Pair (Exists : Boolean := False) is record
      case Exists is
         when True =>
            Lower : Integer;
            Upper : Integer;
         when False =>
            null;
      end case;
   end record;

   type Heap is record
      A    : T_Arr (1 .. MAX_SIZE) := (others => 0);
      Size : Natural               := 0;
   end record;

end Types;

-- end file types.ads


-- start file reverse_in_place_p.adb

package body Reverse_In_Place_P with
   Spark_Mode
 is

   procedure Reverse_In_Place (A : in out T_Arr) is
      Half : Positive :=
        (if A'Length > 1 then
           A'First + (A'Last - A'First) / 2 -
           (if A'Length mod 2 = 0 then 0 else 1)
         else 1);
      T1 : T;
   begin

      if A'Length <= 1 then
         return;
      end if;

      for J in 0 .. Half - A'First loop
         T1              := A (A'First + J);
         A (A'First + J) := A (A'Last - J);
         A (A'Last - J)  := T1;

         pragma Loop_Variant (Increases => J);
         pragma Loop_Invariant
           (A (A'First + J + 1 .. A'Last - (J + 1)) =
            A'Loop_Entry (A'First + J + 1 .. A'Last - (J + 1)));
         pragma Loop_Invariant
           (Is_Reversed
              (A'Loop_Entry (A'First .. A'First + J),
               A (A'Last - J .. A'Last)));

      end loop;

   end Reverse_In_Place;
end Reverse_In_Place_P;

-- end file reverse_in_place_p.adb


-- start file reverse_in_place_p.ads

with Types;         use Types;
with Is_Reversed_P; use Is_Reversed_P;

package Reverse_In_Place_P with
   Spark_Mode
 is

   procedure Reverse_In_Place (A : in out T_Arr) with
      Post => Is_Reversed (A, A'Old);

end Reverse_In_Place_P;

-- end file reverse_in_place_p.adb


-- start file is_reversed_p.ads

with Types; use Types;

package Is_Reversed_P with
   Spark_Mode,
   Ghost
 is

   function Is_Reversed
     (A : T_Arr;
      B : T_Arr)
      return Boolean is
     (for all I in A'Range => A (I) = B (B'Last - (I - A'First))) with
      Pre => A'Length = B'Length;

end Is_Reversed_P;

-- end file is_reversed_p.ads