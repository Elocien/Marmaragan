-- start file input_output.adb

package body Input_Output with
   Spark_Mode
is


   -- Convert AF from graph representation to adjacency matrix representation:
   function AF_From_Graph (G : AF_Graph) return AF is
      N : Natural := 0;
      M : Natural;
      AM : BoolMatrix := (1 .. MaxNumberOfArgs => (1 .. MaxNumberOfArgs => False));
      F : AF;
   begin

      for I in G'Range loop
         M := Positive'Max(G(I)(1),G(I)(2));
         N := Positive'Max(M,N);
         AM(G(I)(1),G(I)(2)) := True;
      end loop;

      F := AF'(Size => N, AdjacencyMatrix => AM);
      return F;

   end AF_From_Graph;


   function ArgList_From_ArgSet (S : ArgSet; F : AF) return ArgList is
      L : NatArray := (1 .. MaxNumberOfArgs => 0);
      OldL : NatArray;
      Counter : Natural := 0;
      OldCounter : Natural;
   begin

      for I in 1 .. F.Size loop
         OldCounter := Counter;
         OldL := L;
         if S(I) then
            Counter := Counter+1;
            L(Counter) := I;
            Exist_Intro_L(I,Counter,L);
         end if;
         Extend_Quantification_Ranges(I,Counter,OldCounter,S,L,OldL,F);
      end loop;

      return ArgList'(Size => Counter, List => L);

   end ArgList_From_ArgSet;


   function ArgSet_From_InputArgList (L : InputArgList; N : AFSize) return ArgSet is
      S : ArgSet := (1 .. MaxNumberOfArgs => False);
   begin

      for K in L'Range loop
         S(L(K)) := True;
      end loop;
      return S;

   end ArgSet_From_InputArgList;


   function Grounded_Input_Output (G : AF_Graph) return ArgList is
      F : AF := AF_From_Graph(G);
   begin

      return ArgList_From_ArgSet(Core_Functions_And_Theorems.Find_Grounded(F),F);

   end Grounded_Input_Output;


   function Check_Grounded_Input_Output (G : AF_Graph; L : InputArgList) return Boolean is
      F : AF := AF_From_Graph(G);
   begin

      return (ArgSet_From_InputArgList(L,F.Size) = Find_Grounded(F));

   end Check_Grounded_Input_Output;


   procedure Extend_Quantification_Ranges (I : Natural; Counter : Natural; OldCounter : Natural; S : ArgSet; L : NatArray; OldL : NatArray; F : AF) is
   begin
         for K in 1 .. I-1 loop
            if S(K) then
            end if;
         end loop;
   end Extend_Quantification_Ranges;


   procedure Exist_Intro_L (I : Natural; Counter : Natural; L : NatArray) is
   begin
      null;
   end Exist_Intro_L;


end Input_Output;

-- end file input_output.adb


-- start file input_output.ads

with Types; use Types;
with Aux; use Aux;
with Core_Definitions; use Core_Definitions;
with Core_Functions_And_Theorems; use Core_Functions_And_Theorems;

package Input_Output with
   Spark_Mode
is


   function AF_From_Graph (G : AF_Graph) return AF with
     Post => (for all I in G'Range => G(I)(1) <= AF_From_Graph'Result.Size and then
                G(I)(2) <= AF_From_Graph'Result.Size and then
                Attacks(G(I)(1),G(I)(2),AF_From_Graph'Result)) and then
             (for all a in 1 .. AF_From_Graph'Result.Size => (for all b in 1 .. AF_From_Graph'Result.Size =>
                (if Attacks(a,b,AF_From_Graph'Result) then (for some I in G'Range => a = G(I)(1) and b = G(I)(2)))));

   function ArgList_From_ArgSet (S : ArgSet; F : AF) return ArgList with
     Pre => Is_ArgSet(S,F.Size),
     Post => ArgList_From_ArgSet'Result.Size <= F.Size and then
     (for all I in 1 .. F.Size => not (S(I) xor (for some J in 1 .. ArgList_From_ArgSet'Result.Size => ArgList_From_ArgSet'Result.List(J) = I)));

   function ArgSet_From_InputArgList (L : InputArgList ; N : AFSize)  return ArgSet with
     Pre => L'Last <= MaxNumberOfArgs,
     Post => --Is_ArgSet(ArgSet_From_InputArgList'Result,N) and then
             (for all I in 1 .. N => not (ArgSet_From_InputArgList'Result(I) xor (for some J in L'Range => L(J) = I)));


   function Grounded_Input_Output (G : AF_Graph) return ArgList with
     Post => Grounded_Input_Output'Result = (ArgList_From_ArgSet(Find_Grounded(AF_From_Graph(G)),AF_From_Graph(G)));

   function Check_Grounded_Input_Output (G : AF_Graph; L : InputArgList) return Boolean with
     Pre => L'Last <= MaxNumberOfArgs,
     Post => Check_Grounded_Input_Output'Result = (ArgSet_From_InputArgList(L,AF_From_Graph(G).Size) = Find_Grounded(AF_From_Graph(G)));


   procedure Extend_Quantification_Ranges (I : Natural; Counter : Natural; OldCounter : Natural; S : ArgSet; L : NatArray; OldL : NatArray; F : AF) with
     Ghost,
     Pre => I <= F.Size and then
            OldCounter <= Counter and then
            Counter <= MaxNumberOfArgs and then
            (for all K in 1 .. I-1 => (if S(K) then (for some J in 1 .. OldCounter => OldL(J) = K))) and then
            (for all J in 1 .. OldCounter => L(J) = OldL(J)),
     Post => (for all K in 1 .. I-1 => (if S(K) then (for some J in 1 .. Counter => L(J) = K)));

   procedure Exist_Intro_L (I : Natural; Counter : Natural; L : NatArray) with
     Ghost,
     Pre => Counter in 1 .. MaxNumberOfArgs and then L(Counter) = I,
     Post => (for some J in 1 .. Counter => L(J) = I);

   function Singleton (a : Arg) return InputArgList is
      (1 .. 1 => a);


end Input_Output;

-- end file input_output.ads


-- start file core_functions_and_theorems.ads

with Types; use Types;
with Aux; use Aux;
with Core_Definitions; use Core_Definitions;
with Lemmas;

package Core_Functions_And_Theorems with
   Spark_Mode
is


   function Find_Grounded (F : AF) return ArgSet with
     Post => Is_ArgSet(Find_Grounded'Result,F.Size) and then
             Grounded(Find_Grounded'Result,F) and then
             (for all I in Arbitrary_ArgSets(F.Size)'Range =>
                (if Complete(Arbitrary_ArgSets(F.Size)(I),F) then Subset(Find_Grounded'Result,Arbitrary_ArgSets(F.Size)(I))));

   procedure Exists_Unique_Grounded (F : AF) with
     Ghost,
     Post => (for some I in Arbitrary_ArgSets(F.Size)'Range =>
                (Grounded(Arbitrary_ArgSets(F.Size)(I),F) and
                     not (for some J in Arbitrary_ArgSets(F.Size)'Range =>
                       (Arbitrary_ArgSets(F.Size)(J) /= Arbitrary_ArgSets(F.Size)(I) and
                          Grounded(Arbitrary_ArgSets(F.Size)(J),F)))));

   procedure Exists_Preferred (F : AF) with
     Ghost,
     Post => (for some I in Arbitrary_ArgSets(F.Size)'Range => (Preferred(Arbitrary_ArgSets(F.Size)(I),F)));

end Core_Functions_And_Theorems;

-- end file core_functions_and_theorems.ads


-- start file aux.ads

with Types; use Types;

package Aux with
   Spark_Mode
is


   function Subset (S1 : ArgSet; S2 : ArgSet) return Boolean is
     (for all a in 1 .. MaxNumberOfArgs => (if S1(a) then S2(a)));

   function Is_ArgSet (S : ArgSet; N : AFSize) return Boolean is
     (for all a in N+1 .. MaxNumberOfArgs => not S(a));

   function Is_ArgList_For (L : ArgList; N : AFSize) return Boolean is
     (L.Size <= N and (for all I in 1 .. L.Size => L.List(I) <= N));

   function ArgSet_From_ArgList (L : ArgList; N : AFSize) return ArgSet with
     Pre => Is_ArgList_For(L,N),
     Post => Is_ArgSet(ArgSet_From_ArgList'Result,N) and then
             (for all I in 1 .. N => not (ArgSet_From_ArgList'Result(I) xor (for some J in 1 .. L.Size => L.List(J) = I)));


   -- The following two functions are for quantifying over ArgSets and reasoning qith such quantifications:
   function Arbitrary_ArgSets (N : AFSize) return ArgSetArray with
     Ghost,
     Post => Arbitrary_ArgSets'Result'First <= Arbitrary_ArgSets'Result'Last and then
             (for all I in Arbitrary_ArgSets'Result'Range => Is_ArgSet(Arbitrary_ArgSets'Result(I),N));

   function Exists_ArgSet_Intro (N : AFSize; S : ArgSet) return Positive with
     Ghost,
     Pre => Is_ArgSet(S,N),
     Post => Exists_ArgSet_Intro'Result in Arbitrary_ArgSets(N)'Range and then
             S = Arbitrary_ArgSets(N)(Exists_ArgSet_Intro'Result);


end Aux;

-- end file aux.ads


-- start file types.ads

package Types with
   Spark_Mode
is


   MaxNumberOfArgs : constant Integer := 1000;

   subtype Arg is Positive range 1 .. MaxNumberOfArgs;

   subtype AFSize is Natural range 0 .. MaxNumberOfArgs;

   type BoolMatrix is array (Arg, Arg) of Boolean;

   type AF is record
      Size : Natural;
      AdjacencyMatrix : BoolMatrix;
   end record with
     Dynamic_Predicate => AF.Size <= MaxNumberOfArgs and then
      (for all I in 1 .. MaxNumberOfArgs => (for all J in 1 .. MaxNumberOfArgs =>
           (if I > AF.Size or J > AF.Size then not AF.AdjacencyMatrix(I,J))));

   type ArgPair is array (Positive range 1 .. 2) of Arg;

   type AF_Graph is array (Positive range <>) of ArgPair;

   type ArgSet is array (Positive range 1 .. MaxNumberOfArgs) of Boolean;

   type NatArray is array (Positive range 1 .. MaxNumberOfArgs) of Natural;

   type ArgList is record
      Size : Natural;
      List : NatArray;
   end record with
     Dynamic_Predicate => ArgList.Size <= MaxNumberOfArgs and then
        (for all I in 1 .. ArgList.Size => (ArgList.List(I) /= 0 and
           not (for some J in 1 .. ArgList.Size => (J /= I and ArgList.List(J) = ArgList.List(I))))) and then
        (for all I in ArgList.Size+1 .. MaxNumberOfArgs => ArgList.List(I) = 0);

   type InputArgList is array (Positive range <>) of Arg;

   type ArgSetArray is array (Positive range <>) of ArgSet;

   type SearchResult (Exists : Boolean := False) is record
      case Exists is
         when True =>
            Arg : Positive;
         when False =>
            null;
      end case;
   end record;

   type CheckReturnType (Valid_Input : Boolean := False) is record
      case Valid_Input is
         when True =>
            Output : Boolean;
         when False =>
            null;
      end case;
   end record;

   end Types;

-- end file types.ads


-- start file core_definitions.ads

with Types; use Types;
with Aux; use Aux;


package Core_Definitions with
   Spark_Mode
is


   function Attacks (a : Positive; b : Positive; F : AF) return Boolean is
     (F.AdjacencyMatrix(a,b)) with
       Pre => a <= F.Size and then b <= F.Size;

   function Conflict_Free (S : ArgSet; F: AF) return Boolean is
     (for all a in 1 .. F.Size => (for all b in 1 .. F.Size =>
          (if S(a) and S(b) then not Attacks(a,b,F)))) with
       Pre => (Is_ArgSet(S,F.Size));

   function Defends (S : ArgSet; a : Positive; F : AF) return Boolean is
     (for all b in 1 .. F.Size => (if Attacks(b,a,F) then
         (for some c in 1 .. F.Size => (S(c) and Attacks(c,b,F))))) with
       Pre => (Is_ArgSet(S,F.Size) and then a <= F.Size);

   function Admissible (S : ArgSet; F : AF) return Boolean is
     (Conflict_Free(S,F) and then (for all a in 1 .. F.Size => (if S(a) then Defends(S,a,F)))) with
       Pre => (Is_ArgSet(S,F.Size));

   function Complete (S : ArgSet; F : AF) return Boolean is
     (Admissible(S,F) and then (for all a in 1 .. F.Size => (if Defends(S,a,F) then S(a)))) with
       Pre => (Is_ArgSet(S,F.Size));

   function Grounded (S : ArgSet; F : AF) return Boolean is
     (Complete(S,F) and then
          (for all I in Arbitrary_ArgSets(F.Size)'Range =>
             (if Subset(Arbitrary_ArgSets(F.Size)(I),S) and Complete(Arbitrary_ArgSets(F.Size)(I),F) then
                 S = (Arbitrary_ArgSets(F.Size)(I))))) with
       Ghost,
       Pre => (Is_ArgSet(S,F.Size));

   function Preferred (S : ArgSet; F : AF) return Boolean is
     (Complete(S,F) and then
          (for all I in Arbitrary_ArgSets(F.Size)'Range =>
             (if Subset(S,Arbitrary_ArgSets(F.Size)(I)) and Complete(Arbitrary_ArgSets(F.Size)(I),F) then
                 S = (Arbitrary_ArgSets(F.Size)(I))))) with
       Ghost,
       Pre => (Is_ArgSet(S,F.Size));


end Core_Definitions;

-- end file core_definitions.ads


-- start file lemmas.ads

with Types; use Types;
with Aux; use Aux;
with Core_Definitions; use Core_Definitions;
with Counting;

package Lemmas with
   Spark_Mode
is


   procedure Admissible_by_Equality (S1 : ArgSet; S2 : ArgSet; F : AF) with
     Ghost,
     Pre => Is_ArgSet(S1,F.Size) and then S1 = S2 and then Admissible(S1,F),
     Post => Admissible(S2,F);

   procedure Defense_by_Equality (S1 : ArgSet; S2 : ArgSet; a: Arg; F : AF) with
     Ghost,
     Pre => Is_ArgSet(S1,F.Size) and then a <= F.Size and then S1 = S2 and then Defends(S1,a,F),
     Post => Defends(S2,a,F);

   procedure Complete_by_Equality (S1 : ArgSet; S2 : ArgSet; F : AF) with
     Ghost,
     Pre => Is_ArgSet(S1,F.Size) and then S1 = S2 and then Complete(S1,F),
     Post => Complete(S2,F);

   procedure Grounded_by_Equality (S1 : ArgSet; S2 : ArgSet; F : AF) with
     Ghost,
     Pre => Is_ArgSet(S1,F.Size) and then S1 = S2 and then Grounded(S1,F),
     Post => Grounded(S2,F);

   -- Lemma: If R defends a and every complete extension contains R, then every complete extension contains a.
   procedure Every_Complete_Extension_Contains (a : Arg; R : ArgSet; F : AF) with
     Ghost,
     Pre => Is_ArgSet(R,F.Size) and then
            a <= F.Size and then
            Defends(R,a,F) and then
            (for all I in Arbitrary_ArgSets(F.Size)'Range =>
               (if Complete(Arbitrary_ArgSets(F.Size)(I),F) then Subset(R,Arbitrary_ArgSets(F.Size)(I)))),
     Post => (for all I in Arbitrary_ArgSets(F.Size)'Range => (if Complete(Arbitrary_ArgSets(F.Size)(I),F) then Arbitrary_ArgSets(F.Size)(I)(a)));

   function Search_Acceptable_Arg (S : ArgSet; F : AF) return SearchResult with
     Pre => Is_ArgSet(S,F.Size),
     Post => (if not Search_Acceptable_Arg'Result.Exists then
                (for all a in 1 .. F.Size => (if not S(a) then not Defends(S,a,F)))) and then
             (if Search_Acceptable_Arg'Result.Exists then
                (Search_Acceptable_Arg'Result.Arg <= F.Size and
                not S(Search_Acceptable_Arg'Result.Arg) and
                Defends(S,Search_Acceptable_Arg'Result.Arg,F)));

   procedure Extend_Admissible_List (L : in out ArgList; a : in Arg; F : in AF) with
     Pre => Is_ArgList_For(L,F.Size) and then
            Is_ArgSet(ArgSet_From_ArgList(L,F.Size),F.Size) and then
            a <= F.Size and then
            not ArgSet_From_ArgList(L,F.Size)(a) and then
            Admissible(ArgSet_From_ArgList(L,F.Size),F) and then
            Defends(ArgSet_From_ArgList(L,F.Size),a,F),
     Post => Is_ArgList_For(L,F.Size) and then
             ArgSet_From_ArgList(L,F.Size)(a) and then
             L'Old.Size < L.Size and then
             (for all b in 1 .. F.Size => (if ArgSet_From_ArgList(L,F.Size)(b) and b /= a then ArgSet_From_ArgList(L'Old,F.Size)(b))) and then
             Admissible(ArgSet_From_ArgList(L,F.Size),F);

   procedure Extend_Admissible (S1 : in ArgSet; S2 : in ArgSet; a : in Arg; F : in AF) with
     Ghost,
     Pre => (Is_ArgSet(S1,F.Size) and then Is_ArgSet(S2,F.Size) and then a <= F.Size and then not S1(a) and then S2(a) and then Subset(S1,S2) and then (for all b in 1 .. F.Size => (if S2(b) and b /= a then S1(b))) and then Admissible(S1,F) and then Defends(S1,a,F)),
     Post => (Admissible(S2,F));

 end Lemmas;

-- end file lemmas.ads


-- start file counting.ads

with Types; use Types;
with Aux; use Aux;

package Counting with
   Spark_Mode
is


   procedure ArgList_Not_Full (L : ArgList; N : AFSize) with
     Ghost,
     Pre => Is_ArgList_For(L,N) and then (not (for all b in 1 .. N => ArgSet_From_ArgList(L,N)(b))),
     Post => L.Size < N;

   procedure Quantified_Substitution_Of_Equals (A : NatArray; N : AFSize; L : ArgList) with
     Ghost,
     Pre => A'First <=1 and then A'Last >= N and then
            (for all J in 1 .. N => A(J) = J) and then
            Is_ArgList_For(L,N) and then
            not (for all J in 1 .. N => ArgSet_From_ArgList(L,N)(J)),
     Post => not (for all J in 1 .. N => ArgSet_From_ArgList(L,N)(A(J)));

   procedure Substitution_Of_Equals (A : NatArray; J : Natural; N : AFSize; L : ArgList) with
     Ghost,
     Pre => J in A'Range and then A(J) = J and then Is_ArgList_For(L,N) and then ArgSet_From_ArgList(L,N)(A(J)),
     Post => ArgSet_From_ArgList(L,N)(J);

   function Array_Contains (A : NatArray; N : Natural; K : Natural) return Boolean is
     (not (for all I in 1 .. N => A(I) /= K)) with
       Pre => A'First <= 1 and A'Last >= N;

   procedure Remove_Elt_From_Array (b : Arg; A : in out NatArray; N : Natural; K : Natural) with
     -- Intuitively, A is an array of numbers between 1 and N of length K, and we remove the element b from it.
     Ghost,
     Pre => N <= MaxNumberOfArgs and then
            K <= N and then
            (for all J in 1 .. K => A(J) in 1 .. N) and then
            (for some I in 1 .. K => A(I) = b),
     Post => (for all J in 1 .. K-1 => A(J) in 1 .. N) and then
             (for all J in 1 .. N => (if J /= b and (for some I in 1 .. K => A'Old(I) = J) then
                (for some I in 1 .. K-1 => A(I) = J)));


end Counting;

-- end file counting.ads