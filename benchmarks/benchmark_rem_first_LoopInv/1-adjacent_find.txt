-- start file adjacent_find_p.adb

package body Adjacent_Find_P with
   Spark_Mode
 is

   function Adjacent_Find
     (A : T_Arr)
      return Option
   is
      Result : Option := (Exists => False);
   begin
      if A'Length <= 1 then
         return Result;
      end if;

      for I in A'First .. A'Last - 1 loop
         if A (I) = A (I + 1) then
            Result := (Exists => True, Value => I);

            return Result;
         end if;

         pragma Loop_Invariant (not Result.Exists);
      end loop;

      return Result;
   end Adjacent_Find;
end Adjacent_Find_P;

-- end file adjacent_find_p.adb


-- start file adjacent_find_p.ads

with Types;                 use Types;
with Has_Equal_Neighbors_P; use Has_Equal_Neighbors_P;

package Adjacent_Find_P with
   Spark_Mode
 is

   function Adjacent_Find
     (A : T_Arr)
      return Option with
      Contract_Cases =>
      (Has_Equal_Neighbors (A) =>
         (Adjacent_Find'Result.Exists = True)
         and then
         (A (Adjacent_Find'Result.Value) = A (Adjacent_Find'Result.Value + 1))
         and then
         (not Has_Equal_Neighbors (A (A'First .. Adjacent_Find'Result.Value))),
       others => Adjacent_Find'Result.Exists = False);

end Adjacent_Find_P;

-- end file adjacent_find_p.ads


-- start file types.ads

package Types is

   type T is new Integer;

   type T_Arr is array (Positive range <>) of T;

   type T_Option (OK : Boolean) is record
      case OK is
         when True =>
            Value : T;
         when False =>
            null;
      end case;
   end record;

   MAX_SIZE : constant := 1000;

   type Option (Exists : Boolean := False) is record
      case Exists is
         when True =>
            Value : Integer;
         when False =>
            null;
      end case;
   end record;

   type Option_Pair (Exists : Boolean := False) is record
      case Exists is
         when True =>
            Lower : Integer;
            Upper : Integer;
         when False =>
            null;
      end case;
   end record;

   type Heap is record
      A    : T_Arr (1 .. MAX_SIZE) := (others => 0);
      Size : Natural               := 0;
   end record;

end Types;

-- end file types.ads


-- start file has_equal_neighbors_p.ads

with Types; use Types;

package Has_Equal_Neighbors_P with
   Spark_Mode,
   Ghost
 is
   function Has_Equal_Neighbors
     (A : T_Arr)
      return Boolean is
     (if (A'Length = 0) then False
      else (for some I in A'First .. A'Last - 1 => A (I) = A (I + 1)));

end Has_Equal_Neighbors_P;

-- end file has_equal_neighbors_p.ads