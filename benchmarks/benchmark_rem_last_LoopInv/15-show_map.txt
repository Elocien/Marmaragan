-- start file show_map.adb

package body Show_Map with
    Spark_Mode
is

procedure Map (A : in out Nat_Array) is
    A_I : constant Nat_Array := A with Ghost;
    begin
        for K in A'Range loop
            if K /= A'First then
                A (K - 1) := F (A (K));
            end if;
            pragma Loop_Invariant
            (for all J in A'First .. K =>
                (if J /= A'First then A (J - 1) = F (A'Loop_Entry (J))));
        end loop;
        pragma Assert (for all K in A'Range =>
                        (if K /= A'First then A (K - 1) = F (A_I (K))));
    end Map;
end Show_Map;

-- end file show_map.adb


-- start file show_map.ads

package Show_Map with
    Spark_Mode
is
    type Nat_Array is array (Positive range <>) of Natural;

    function F (V : Natural) return Natural is
        (if V /= Natural'Last then V + 1 else V);

    procedure Map (A : in out Nat_Array);

end Show_Map;

-- end file show_map.ads