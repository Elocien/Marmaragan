-- start file aux.adb

package body Aux with
   Spark_Mode
is


   function ArgSet_From_ArgList (L : ArgList; N : AFSize) return ArgSet is
      S : ArgSet := (1 .. MaxNumberOfArgs => False);
   begin

      for K in 1 .. L.Size loop
         pragma Loop_Invariant (for all I in 1 .. N => (if S(I) then (for some J in 1 .. K-1 => L.List(J) = I)));
         pragma Loop_Invariant (for all I in 1 .. N => (if (for some J in 1 .. K-1 => L.List(J) = I) then S(I)));
         S(L.List(K)) := True;
      end loop;
      return S;

   end ArgSet_From_ArgList;


   function Arbitrary_ArgSets (N : AFSize) return ArgSetArray is
      S : ArgSet := (1 .. MaxNumberOfArgs => False);
      R : ArgSetArray := (1 .. 1 => S);
   begin

      return R;

   end Arbitrary_ArgSets;


   function Exists_ArgSet_Intro (N : AFSize; S : ArgSet) return Positive is
      I : Positive := Arbitrary_ArgSets(N)'First;
   begin

      -- This function together with Arbitrary_ArgSets ensures that we can quantify over ArgSets and reason meaningfully with such quantifiers.
      -- The following pragma Assume is needed in order to conclude an existentially quantified statement from a specific instance of an ArgSet with the required property.
      pragma Assume (S = Arbitrary_ArgSets(N)(I));

      return I;

   end Exists_ArgSet_Intro;


end Aux;

-- end file aux.adb


-- start file aux.ads

with Types; use Types;

package Aux with
   Spark_Mode
is


   function Subset (S1 : ArgSet; S2 : ArgSet) return Boolean is
     (for all a in 1 .. MaxNumberOfArgs => (if S1(a) then S2(a)));

   function Is_ArgSet (S : ArgSet; N : AFSize) return Boolean is
     (for all a in N+1 .. MaxNumberOfArgs => not S(a));

   function Is_ArgList_For (L : ArgList; N : AFSize) return Boolean is
     (L.Size <= N and (for all I in 1 .. L.Size => L.List(I) <= N));

   function ArgSet_From_ArgList (L : ArgList; N : AFSize) return ArgSet with
     Pre => Is_ArgList_For(L,N),
     Post => Is_ArgSet(ArgSet_From_ArgList'Result,N) and then
             (for all I in 1 .. N => not (ArgSet_From_ArgList'Result(I) xor (for some J in 1 .. L.Size => L.List(J) = I)));


   -- The following two functions are for quantifying over ArgSets and reasoning qith such quantifications:
   function Arbitrary_ArgSets (N : AFSize) return ArgSetArray with
     Ghost,
     Post => Arbitrary_ArgSets'Result'First <= Arbitrary_ArgSets'Result'Last and then
             (for all I in Arbitrary_ArgSets'Result'Range => Is_ArgSet(Arbitrary_ArgSets'Result(I),N));

   function Exists_ArgSet_Intro (N : AFSize; S : ArgSet) return Positive with
     Ghost,
     Pre => Is_ArgSet(S,N),
     Post => Exists_ArgSet_Intro'Result in Arbitrary_ArgSets(N)'Range and then
             S = Arbitrary_ArgSets(N)(Exists_ArgSet_Intro'Result);


end Aux;

-- end file aux.ads


-- start file types.ads

package Types with
   Spark_Mode
is


   MaxNumberOfArgs : constant Integer := 1000;

   subtype Arg is Positive range 1 .. MaxNumberOfArgs;

   subtype AFSize is Natural range 0 .. MaxNumberOfArgs;

   type BoolMatrix is array (Arg, Arg) of Boolean;

   type AF is record
      Size : Natural;
      AdjacencyMatrix : BoolMatrix;
   end record with
     Dynamic_Predicate => AF.Size <= MaxNumberOfArgs and then
      (for all I in 1 .. MaxNumberOfArgs => (for all J in 1 .. MaxNumberOfArgs =>
           (if I > AF.Size or J > AF.Size then not AF.AdjacencyMatrix(I,J))));

   type ArgPair is array (Positive range 1 .. 2) of Arg;

   type AF_Graph is array (Positive range <>) of ArgPair;

   type ArgSet is array (Positive range 1 .. MaxNumberOfArgs) of Boolean;

   type NatArray is array (Positive range 1 .. MaxNumberOfArgs) of Natural;

   type ArgList is record
      Size : Natural;
      List : NatArray;
   end record with
     Dynamic_Predicate => ArgList.Size <= MaxNumberOfArgs and then
        (for all I in 1 .. ArgList.Size => (ArgList.List(I) /= 0 and
           not (for some J in 1 .. ArgList.Size => (J /= I and ArgList.List(J) = ArgList.List(I))))) and then
        (for all I in ArgList.Size+1 .. MaxNumberOfArgs => ArgList.List(I) = 0);

   type InputArgList is array (Positive range <>) of Arg;

   type ArgSetArray is array (Positive range <>) of ArgSet;

   type SearchResult (Exists : Boolean := False) is record
      case Exists is
         when True =>
            Arg : Positive;
         when False =>
            null;
      end case;
   end record;

   type CheckReturnType (Valid_Input : Boolean := False) is record
      case Valid_Input is
         when True =>
            Output : Boolean;
         when False =>
            null;
      end case;
   end record;

   end Types;


-- end file types.ads