-- start file counting.adb

package body Counting with
   Spark_Mode
is


   procedure ArgList_Not_Full (L : ArgList; N : AFSize) is
      A : NatArray := (1 .. MaxNumberOfArgs => 0);
   begin

      for I in 1 .. N loop
         A(I) := I;
      end loop;
      Quantified_Substitution_Of_Equals(A,N,L);
      for J in 1 .. N loop
      end loop;
      for I in 1 .. L.Size loop
         Remove_Elt_From_Array(L.List(I),A,N,N-I+1);
      end loop;

   end ArgList_Not_Full;


   procedure Quantified_Substitution_Of_Equals (A : NatArray; N : AFSize; L : ArgList) is
   begin

      if (for all J in 1 .. N => ArgSet_From_ArgList(L,N)(A(J))) then
         for J in 1 .. N loop
            Substitution_Of_Equals(A,J,N,L);
         end loop;
      end if;

   end;


   procedure Substitution_Of_Equals (A : NatArray; J : Natural; N : AFSize; L : ArgList) is
   begin
      null;
   end;


   procedure Remove_Elt_From_Array (b : Arg; A : in out NatArray; N : Natural; K : Natural) is
      Found : Boolean := False; -- whether b has already been found in A
      Position : Natural := 0; -- position where b was found in A
      AOld : NatArray := A;
   begin

      for I in 1 .. K loop
         if Found = False then
            if A(I) = b then
               Found := True;
               Position := I;
               if I < K then
                  A(I) := A(I+1);
               end if;
            end if;
         end if;
         if Found = True then
            if I < K then
               A(I) := A(I+1);
            end if;
         end if;
      end loop;

      for J in 1 .. N loop

         for I in 1 .. K loop

            if J /= b and AOld(I) = J then

               if I < Position then

               else

               end if;

            end if;
         end loop;

      end loop;

   end Remove_Elt_From_Array;


end Counting;

-- end file counting.adb


-- start file counting.ads

with Types; use Types;
with Aux; use Aux;

package Counting with
   Spark_Mode
is


   procedure ArgList_Not_Full (L : ArgList; N : AFSize) with
     Ghost,
     Pre => Is_ArgList_For(L,N) and then (not (for all b in 1 .. N => ArgSet_From_ArgList(L,N)(b))),
     Post => L.Size < N;

   procedure Quantified_Substitution_Of_Equals (A : NatArray; N : AFSize; L : ArgList) with
     Ghost,
     Pre => A'First <=1 and then A'Last >= N and then
            (for all J in 1 .. N => A(J) = J) and then
            Is_ArgList_For(L,N) and then
            not (for all J in 1 .. N => ArgSet_From_ArgList(L,N)(J)),
     Post => not (for all J in 1 .. N => ArgSet_From_ArgList(L,N)(A(J)));

   procedure Substitution_Of_Equals (A : NatArray; J : Natural; N : AFSize; L : ArgList) with
     Ghost,
     Pre => J in A'Range and then A(J) = J and then Is_ArgList_For(L,N) and then ArgSet_From_ArgList(L,N)(A(J)),
     Post => ArgSet_From_ArgList(L,N)(J);

   function Array_Contains (A : NatArray; N : Natural; K : Natural) return Boolean is
     (not (for all I in 1 .. N => A(I) /= K)) with
       Pre => A'First <= 1 and A'Last >= N;

   procedure Remove_Elt_From_Array (b : Arg; A : in out NatArray; N : Natural; K : Natural) with
     -- Intuitively, A is an array of numbers between 1 and N of length K, and we remove the element b from it.
     Ghost,
     Pre => N <= MaxNumberOfArgs and then
            K <= N and then
            (for all J in 1 .. K => A(J) in 1 .. N) and then
            (for some I in 1 .. K => A(I) = b),
     Post => (for all J in 1 .. K-1 => A(J) in 1 .. N) and then
             (for all J in 1 .. N => (if J /= b and (for some I in 1 .. K => A'Old(I) = J) then
                (for some I in 1 .. K-1 => A(I) = J)));


end Counting;

-- end file counting.ads


-- start file aux.ads

with Types; use Types;

package Aux with
   Spark_Mode
is


   function Subset (S1 : ArgSet; S2 : ArgSet) return Boolean is
     (for all a in 1 .. MaxNumberOfArgs => (if S1(a) then S2(a)));

   function Is_ArgSet (S : ArgSet; N : AFSize) return Boolean is
     (for all a in N+1 .. MaxNumberOfArgs => not S(a));

   function Is_ArgList_For (L : ArgList; N : AFSize) return Boolean is
     (L.Size <= N and (for all I in 1 .. L.Size => L.List(I) <= N));

   function ArgSet_From_ArgList (L : ArgList; N : AFSize) return ArgSet with
     Pre => Is_ArgList_For(L,N),
     Post => Is_ArgSet(ArgSet_From_ArgList'Result,N) and then
             (for all I in 1 .. N => not (ArgSet_From_ArgList'Result(I) xor (for some J in 1 .. L.Size => L.List(J) = I)));


   -- The following two functions are for quantifying over ArgSets and reasoning qith such quantifications:
   function Arbitrary_ArgSets (N : AFSize) return ArgSetArray with
     Ghost,
     Post => Arbitrary_ArgSets'Result'First <= Arbitrary_ArgSets'Result'Last and then
             (for all I in Arbitrary_ArgSets'Result'Range => Is_ArgSet(Arbitrary_ArgSets'Result(I),N));

   function Exists_ArgSet_Intro (N : AFSize; S : ArgSet) return Positive with
     Ghost,
     Pre => Is_ArgSet(S,N),
     Post => Exists_ArgSet_Intro'Result in Arbitrary_ArgSets(N)'Range and then
             S = Arbitrary_ArgSets(N)(Exists_ArgSet_Intro'Result);


end Aux;

-- end file aux.ads


-- start file types.ads

package Types with
   Spark_Mode
is


   MaxNumberOfArgs : constant Integer := 1000;

   subtype Arg is Positive range 1 .. MaxNumberOfArgs;

   subtype AFSize is Natural range 0 .. MaxNumberOfArgs;

   type BoolMatrix is array (Arg, Arg) of Boolean;

   type AF is record
      Size : Natural;
      AdjacencyMatrix : BoolMatrix;
   end record with
     Dynamic_Predicate => AF.Size <= MaxNumberOfArgs and then
      (for all I in 1 .. MaxNumberOfArgs => (for all J in 1 .. MaxNumberOfArgs =>
           (if I > AF.Size or J > AF.Size then not AF.AdjacencyMatrix(I,J))));

   type ArgPair is array (Positive range 1 .. 2) of Arg;

   type AF_Graph is array (Positive range <>) of ArgPair;

   type ArgSet is array (Positive range 1 .. MaxNumberOfArgs) of Boolean;

   type NatArray is array (Positive range 1 .. MaxNumberOfArgs) of Natural;

   type ArgList is record
      Size : Natural;
      List : NatArray;
   end record with
     Dynamic_Predicate => ArgList.Size <= MaxNumberOfArgs and then
        (for all I in 1 .. ArgList.Size => (ArgList.List(I) /= 0 and
           not (for some J in 1 .. ArgList.Size => (J /= I and ArgList.List(J) = ArgList.List(I))))) and then
        (for all I in ArgList.Size+1 .. MaxNumberOfArgs => ArgList.List(I) = 0);

   type InputArgList is array (Positive range <>) of Arg;

   type ArgSetArray is array (Positive range <>) of ArgSet;

   type SearchResult (Exists : Boolean := False) is record
      case Exists is
         when True =>
            Arg : Positive;
         when False =>
            null;
      end case;
   end record;

   type CheckReturnType (Valid_Input : Boolean := False) is record
      case Valid_Input is
         when True =>
            Output : Boolean;
         when False =>
            null;
      end case;
   end record;

   end Types;


-- end file types.ads