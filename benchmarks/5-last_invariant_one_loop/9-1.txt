-- start file is_sorted_p.adb

package body Is_Sorted_P with
   Spark_Mode
 is

   procedure Weakly_To_Sorted (A : T_Arr) is
   begin
      for J in A'Range loop
         null;

      end loop;
   end Weakly_To_Sorted;

   function Is_Sorted
     (A : T_Arr)
      return Boolean
   is
   begin
      if A'Length > 0 then
         for J in A'First .. A'Last - 1 loop
            if A (J) > A (J + 1) then
               return False;
            end if;

            pragma Loop_Invariant (Weakly_Sorted (A (A'First .. J + 1)));

         end loop;
      end if;

      Weakly_To_Sorted (A);

      return True;
   end Is_Sorted;

end Is_Sorted_P;

-- end file is_sorted_p.adb


-- start file is_sorted_p.ads

with Types;    use Types;
with Sorted_P; use Sorted_P;

package Is_Sorted_P with
   Spark_Mode
 is

   procedure Weakly_To_Sorted (A : T_Arr) with
      Ghost,
      Pre  => Weakly_Sorted (A),
      Post => Sorted (A);

   function Is_Sorted
     (A : T_Arr)
      return Boolean with
      Contract_Cases => (Sorted (A) => Is_Sorted'Result = True,
       others => Is_Sorted'Result = False);

end Is_Sorted_P;

-- end file is_sorted_p.ads


-- start file types.ads

package Types is

   type T is new Integer;

   type T_Arr is array (Positive range <>) of T;

   type T_Option (OK : Boolean) is record
      case OK is
         when True =>
            Value : T;
         when False =>
            null;
      end case;
   end record;

   MAX_SIZE : constant := 1000;

   type Option (Exists : Boolean := False) is record
      case Exists is
         when True =>
            Value : Integer;
         when False =>
            null;
      end case;
   end record;

   type Option_Pair (Exists : Boolean := False) is record
      case Exists is
         when True =>
            Lower : Integer;
            Upper : Integer;
         when False =>
            null;
      end case;
   end record;

   type Heap is record
      A    : T_Arr (1 .. MAX_SIZE) := (others => 0);
      Size : Natural               := 0;
   end record;

end Types;

-- end file types.ads


-- start file sorted_p.ads

with Types; use Types;

package Sorted_P with
   Spark_Mode,
   Ghost
 is

   function Weakly_Sorted
     (A : T_Arr)
      return Boolean is
     (if A'Length > 0 then
        (for all J in A'First .. A'Last - 1 => A (J) <= A (J + 1)));

   function Sorted
     (A : T_Arr)
      return Boolean is
     (for all J in A'Range =>
        (for all I in A'First .. J - 1 => A (I) <= A (J)));

end Sorted_P;

-- end file sorted_p.ads