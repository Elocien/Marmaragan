-- start file find_p.adb

package body Find_P with
   Spark_Mode
 is

   function Find
     (A   : T_Arr;
      Val : T)
      return Option
   is
      Result : Option := (Exists => False);
   begin
      for I in A'Range loop
         if A (I) = Val then
            Result := (Exists => True, Value => I);

            return Result;
         end if;

         pragma Loop_Invariant (not Result.Exists);
      end loop;

      return Result;
   end Find;
end Find_P;

-- end file find_p.adb


-- start file find_p.ads

with Types;       use Types;
with Has_Value_P; use Has_Value_P;

package Find_P with
   Spark_Mode
 is

   function Find
     (A   : T_Arr;
      Val : T)
      return Option with
      Contract_Cases =>
      (Has_Value (A, Val) =>
         (Find'Result.Exists = True)
         and then Find'Result.Value in A'First .. A'Last
         and then (A (Find'Result.Value) = Val)
         and then (not Has_Value (A (A'First .. Find'Result.Value - 1), Val)),
       others => Find'Result.Exists = False);

end Find_P;

-- end file find_p.ads


-- start file types.ads

package Types is

   type T is new Integer;

   type T_Arr is array (Positive range <>) of T;

   type T_Option (OK : Boolean) is record
      case OK is
         when True =>
            Value : T;
         when False =>
            null;
      end case;
   end record;

   MAX_SIZE : constant := 1000;

   type Option (Exists : Boolean := False) is record
      case Exists is
         when True =>
            Value : Integer;
         when False =>
            null;
      end case;
   end record;

   type Option_Pair (Exists : Boolean := False) is record
      case Exists is
         when True =>
            Lower : Integer;
            Upper : Integer;
         when False =>
            null;
      end case;
   end record;

   type Heap is record
      A    : T_Arr (1 .. MAX_SIZE) := (others => 0);
      Size : Natural               := 0;
   end record;

end Types;

-- end file types.ads


-- start file has_value_p.ads

with Types; use Types;

package Has_Value_P with
   Spark_Mode,
   Ghost
 is
   function Has_Value
     (A   : T_Arr;
      Val : T)
      return Boolean is (for some I in A'Range => A (I) = Val);

end Has_Value_P;

-- end file has_value_p.ads