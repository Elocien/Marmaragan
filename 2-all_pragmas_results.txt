



benchmarks/2-all_pragmas/14-1.txt
Compilation successful: True

Mediums: 
[['search_lower_bound_p.adb:22:45: ', ": overflow check might fail (e.g. when Result = (Exists => ?, Value => Integer'First) and Right = 0)"], ['search_lower_bound_p.adb:23:19: ', ": array index check might fail (e.g. when A = (others => 0) and A'First = 1 and A'Last = 1 and Middle = 0) [possible explanation: loop at line 21 should mention Middle in a loop invariant]"], ['search_lower_bound_p.ads:16:21: ', ": contract case might fail (e.g. when A = (others => 0) and A'First = 1 and A'Last = 1 and Search_Lower_Bound'Result = (Exists => True, Value => 1) and V = 0)"]]

Output:
Phase 1 of 2: generation of Global contracts ...
Phase 2 of 2: flow analysis and proof ...
search_lower_bound_p.adb:13:07: warning: initialization of "Middle" has no effect
search_lower_bound_p.adb:22:45: medium: overflow check might fail (e.g. when Result = (Exists => ?, Value => Integer'First) and Right = 0)
search_lower_bound_p.adb:23:19: medium: array index check might fail (e.g. when A = (others => 0) and A'First = 1 and A'Last = 1 and Middle = 0) [possible explanation: loop at line 21 should mention Middle in a loop invariant]
search_lower_bound_p.ads:16:21: medium: contract case might fail (e.g. when A = (others => 0) and A'First = 1 and A'Last = 1 and Search_Lower_Bound'Result = (Exists => True, Value => 1) and V = 0)
Summary logged in /Users/lucian/Documents/Uni/Projects/Diplomarbeit/Marmaragan.nosync/tmp_2-all_pragmas/search_lower_bound_p/gnatprove/gnatprove.out
--------------------------------------------------




benchmarks/2-all_pragmas/8-1.txt
Compilation successful: True

Mediums: 
[['find_p.ads:13:27: ', ": contract case might fail (e.g. when Find'Result = (Exists => False, Value => 3))"]]

Output:
Phase 1 of 2: generation of Global contracts ...
Phase 2 of 2: flow analysis and proof ...
find_p.ads:13:27: medium: contract case might fail (e.g. when Find'Result = (Exists => False, Value => 3))
Summary logged in /Users/lucian/Documents/Uni/Projects/Diplomarbeit/Marmaragan.nosync/tmp_2-all_pragmas/find_p/gnatprove/gnatprove.out
--------------------------------------------------




benchmarks/2-all_pragmas/16-1.txt
Compilation successful: True

Mediums: 
[['swap_ranges_p.ads:11:15: ', ": postcondition might fail, cannot prove A'Old = B (e.g. when A'First = 1 and A'Last = 1 and A'Old = (1 => -1, others => -1) and B = (others => 0) and B'First = 1 and B'Last = 1) [possible explanation: loop at swap_ranges_p.adb:10 should mention A and B in a loop invariant]"]]

Output:
Phase 1 of 2: generation of Global contracts ...
Phase 2 of 2: flow analysis and proof ...
swap_ranges_p.ads:11:15: medium: postcondition might fail, cannot prove A'Old = B (e.g. when A'First = 1 and A'Last = 1 and A'Old = (1 => -1, others => -1) and B = (others => 0) and B'First = 1 and B'Last = 1) [possible explanation: loop at swap_ranges_p.adb:10 should mention A and B in a loop invariant]
Summary logged in /Users/lucian/Documents/Uni/Projects/Diplomarbeit/Marmaragan.nosync/tmp_2-all_pragmas/swap_ranges_p/gnatprove/gnatprove.out
--------------------------------------------------




benchmarks/2-all_pragmas/12-1.txt
Compilation successful: True

Mediums: 
[['mismatch_p.ads:13:15: ', ": contract case might fail (e.g. when Mismatch'Result = (Exists => False, Value => 3))"]]

Output:
Phase 1 of 2: generation of Global contracts ...
Phase 2 of 2: flow analysis and proof ...
mismatch_p.ads:13:15: medium: contract case might fail (e.g. when Mismatch'Result = (Exists => False, Value => 3))
Summary logged in /Users/lucian/Documents/Uni/Projects/Diplomarbeit/Marmaragan.nosync/tmp_2-all_pragmas/mismatch_p/gnatprove/gnatprove.out
--------------------------------------------------




benchmarks/2-all_pragmas/10-1.txt
Compilation successful: True

Mediums: 
[['linear_search.adb:13:15: ', ': array index check might fail (e.g. when Pos = 0)'], ['linear_search.ads:33:20: ', ": contract case might fail (e.g. when Search'Result = (Found => False, At_Index => 2))"], ['linear_search.ads:34:24: ', ": discriminant check might fail (e.g. when Search'Result = (Found => False, At_Index => 2))"], ['linear_search.ads:35:67: ', ": contract case might fail (e.g. when Search'Result = (Found => False, At_Index => 1))"]]

Output:
Phase 1 of 2: generation of Global contracts ...
Phase 2 of 2: flow analysis and proof ...
linear_search.adb:13:15: medium: array index check might fail (e.g. when Pos = 0)
linear_search.ads:33:20: medium: contract case might fail (e.g. when Search'Result = (Found => False, At_Index => 2))
linear_search.ads:34:24: medium: discriminant check might fail (e.g. when Search'Result = (Found => False, At_Index => 2))
linear_search.ads:35:67: medium: contract case might fail (e.g. when Search'Result = (Found => False, At_Index => 1))
Summary logged in /Users/lucian/Documents/Uni/Projects/Diplomarbeit/Marmaragan.nosync/tmp_2-all_pragmas/linear_search/gnatprove/gnatprove.out
--------------------------------------------------




benchmarks/2-all_pragmas/9-1.txt
Compilation successful: True

Mediums: 
[['is_sorted_p.adb:27:07: ', ": precondition might fail, cannot prove Weakly_Sorted (A) (e.g. when A = (2 => 0, 3 => -1, 4 => 0, 5 => 0, others => 1) and A'First = 1 and A'Last = 5) [possible explanation: subprogram at is_sorted_p.ads:13 should mention A in a precondition]"], ['is_sorted_p.ads:11:15: ', ": postcondition might fail, cannot prove Sorted (A) (e.g. when A = (others => 0) and A'First = 1 and A'Last = 0)"]]

Output:
Phase 1 of 2: generation of Global contracts ...
Phase 2 of 2: flow analysis and proof ...
is_sorted_p.adb:27:07: medium: precondition might fail, cannot prove Weakly_Sorted (A) (e.g. when A = (2 => 0, 3 => -1, 4 => 0, 5 => 0, others => 1) and A'First = 1 and A'Last = 5) [possible explanation: subprogram at is_sorted_p.ads:13 should mention A in a precondition]
is_sorted_p.ads:11:15: medium: postcondition might fail, cannot prove Sorted (A) (e.g. when A = (others => 0) and A'First = 1 and A'Last = 0)
Summary logged in /Users/lucian/Documents/Uni/Projects/Diplomarbeit/Marmaragan.nosync/tmp_2-all_pragmas/is_sorted_p/gnatprove/gnatprove.out
--------------------------------------------------




benchmarks/2-all_pragmas/15-1.txt
Compilation successful: True

Mediums: 
[]

Output:
Phase 1 of 2: generation of Global contracts ...
Phase 2 of 2: flow analysis and proof ...
Summary logged in /Users/lucian/Documents/Uni/Projects/Diplomarbeit/Marmaragan.nosync/tmp_2-all_pragmas/show_map/gnatprove/gnatprove.out
--------------------------------------------------




benchmarks/2-all_pragmas/11-1.txt
Compilation successful: True

Mediums: 
[['max_element_p.adb:16:25: ', ": array index check might fail (e.g. when A = (others => 0) and A'First = 1 and A'Last = 1 and Result = (Exists => ?, Value => 0)) [possible explanation: loop at line 15 should mention Result in a loop invariant]"], ['max_element_p.ads:12:21: ', ": contract case might fail (e.g. when A = (2 => 1, others => 0) and A'First = 1 and A'Last = 3 and Max_Element'Result = (Exists => True, Value => 3))"]]

Output:
Phase 1 of 2: generation of Global contracts ...
Phase 2 of 2: flow analysis and proof ...
max_element_p.adb:16:25: medium: array index check might fail (e.g. when A = (others => 0) and A'First = 1 and A'Last = 1 and Result = (Exists => ?, Value => 0)) [possible explanation: loop at line 15 should mention Result in a loop invariant]
max_element_p.ads:12:21: medium: contract case might fail (e.g. when A = (2 => 1, others => 0) and A'First = 1 and A'Last = 3 and Max_Element'Result = (Exists => True, Value => 3))
Summary logged in /Users/lucian/Documents/Uni/Projects/Diplomarbeit/Marmaragan.nosync/tmp_2-all_pragmas/max_element_p/gnatprove/gnatprove.out
--------------------------------------------------




benchmarks/2-all_pragmas/13-1.txt
Compilation successful: True

Mediums: 
[]

Output:
Phase 1 of 2: generation of Global contracts ...
Phase 2 of 2: flow analysis and proof ...
Summary logged in /Users/lucian/Documents/Uni/Projects/Diplomarbeit/Marmaragan.nosync/tmp_2-all_pragmas/reverse_in_place_p/gnatprove/gnatprove.out
--------------------------------------------------




benchmarks/2-all_pragmas/1-1.txt
Compilation successful: True

Mediums: 
[['aux.ads:19:14: ', ": postcondition might fail, cannot prove Is_ArgSet(ArgSet_From_ArgList'Result,N) (e.g. when ArgSet_From_ArgList'Result = (1 => True, 2 => True, others => False) and N = 1)"], ['aux.ads:33:14: ', ": postcondition might fail, cannot prove S = Arbitrary_ArgSets(N)(Exists_ArgSet_Intro'result) (e.g. when Exists_ArgSet_Intro'Result = 1 and N = 1 and S = (1 => True, others => False))"]]

Output:
Phase 1 of 2: generation of Global contracts ...
Phase 2 of 2: flow analysis and proof ...
aux.ads:19:14: medium: postcondition might fail, cannot prove Is_ArgSet(ArgSet_From_ArgList'Result,N) (e.g. when ArgSet_From_ArgList'Result = (1 => True, 2 => True, others => False) and N = 1)
aux.ads:33:14: medium: postcondition might fail, cannot prove S = Arbitrary_ArgSets(N)(Exists_ArgSet_Intro'result) (e.g. when Exists_ArgSet_Intro'Result = 1 and N = 1 and S = (1 => True, others => False))
Summary logged in /Users/lucian/Documents/Uni/Projects/Diplomarbeit/Marmaragan.nosync/tmp_2-all_pragmas/aux/gnatprove/gnatprove.out
--------------------------------------------------




benchmarks/2-all_pragmas/3-1.txt
Compilation successful: False

Mediums: 
[]

Output:
Phase 1 of 2: generation of Global contracts ...
counting.adb:15:06: statement expected
counting.adb:72:15: statement expected
counting.adb:74:15: statement expected
--------------------------------------------------




benchmarks/2-all_pragmas/7-1.txt
Compilation successful: True

Mediums: 
[['copy_p.ads:11:15: ', ": postcondition might fail, cannot prove B = A (e.g. when A = (1 => 0, 2 => 0, others => -1) and A'First = 1 and A'Last = 2 and B = (1 => -1, others => 0) and B'First = 1 and B'Last = 2) [possible explanation: loop at copy_p.adb:10 should mention B in a loop invariant]"]]

Output:
Phase 1 of 2: generation of Global contracts ...
Phase 2 of 2: flow analysis and proof ...
copy_p.ads:11:15: medium: postcondition might fail, cannot prove B = A (e.g. when A = (1 => 0, 2 => 0, others => -1) and A'First = 1 and A'Last = 2 and B = (1 => -1, others => 0) and B'First = 1 and B'Last = 2) [possible explanation: loop at copy_p.adb:10 should mention B in a loop invariant]
Summary logged in /Users/lucian/Documents/Uni/Projects/Diplomarbeit/Marmaragan.nosync/tmp_2-all_pragmas/copy_p/gnatprove/gnatprove.out
--------------------------------------------------




benchmarks/2-all_pragmas/5-1.txt
Compilation successful: False

Mediums: 
[]

Output:
Phase 1 of 2: generation of Global contracts ...
lemmas.adb:9:03: statement expected
lemmas.adb:15:03: statement expected
lemmas.adb:39:09: statement expected
lemmas.adb:52:09: statement expected
lemmas.adb:92:03: statement expected
--------------------------------------------------




benchmarks/2-all_pragmas/2-1.txt
Compilation successful: False

Mediums: 
[]

Output:
Phase 1 of 2: generation of Global contracts ...
core_functions_and_theorems.adb:39:09: statement expected
--------------------------------------------------




benchmarks/2-all_pragmas/4-1.txt
Compilation successful: False

Mediums: 
[]

Output:
Phase 1 of 2: generation of Global contracts ...
input_output.adb:83:12: statement expected
--------------------------------------------------




benchmarks/2-all_pragmas/6-1.txt
Compilation successful: True

Mediums: 
[['adjacent_find_p.ads:12:32: ', ": contract case might fail (e.g. when Adjacent_Find'Result = (Exists => False, Value => Integer'Last))"]]

Output:
Phase 1 of 2: generation of Global contracts ...
Phase 2 of 2: flow analysis and proof ...
adjacent_find_p.ads:12:32: medium: contract case might fail (e.g. when Adjacent_Find'Result = (Exists => False, Value => Integer'Last))
Summary logged in /Users/lucian/Documents/Uni/Projects/Diplomarbeit/Marmaragan.nosync/tmp_2-all_pragmas/adjacent_find_p/gnatprove/gnatprove.out
--------------------------------------------------
